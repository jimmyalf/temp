#pragma warning disable 1591

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Spinit's LINQ to SQL template for T4 C#
//     Generated at 11/16/2009 09:19:47
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq.Expressions;

using Spinit.Data.Linq;

using Spinit.Wpc.Synologen.OPQ.Core.Entities;

namespace Spinit.Wpc.Synologen.OPQ.Data.Entities
{	
	[Table(Name=@"dbo.tblBaseLocations")]
	public partial class EBaseLocation : EntityBase
	{
		#region Spinit search extension
		
		/// <summary>
		/// Creates a lambda-expression for use with the data-load-option feature,
		/// </summary>
		/// <param name="property">The property to search-for.</param>
		/// <returns>A lambda-expression.</returns>

		public override LambdaExpression BuildSearchExpression (string property)
		{
			ParameterExpression parameter = Expression.Parameter (GetType (), "eBaseLocation");
			return Expression.Lambda<Func<EBaseLocation, object>> (
						Expression.Property (parameter, property),
						parameter);
		}
		
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public EBaseLocation()
		{
			_tblBaseUsers = new EntitySet<EBaseUser>(AttachBaseUsers, DetachBaseUsers);
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnIdChanging(int value);
		partial void OnIdChanged();
		private int _Id;
		[Column(Storage=@"_Id", Name=@"cId", AutoSync=AutoSync.OnInsert, DbType=@"Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get { return _Id; }
			set {
				if (_Id != value) {
					OnIdChanging(value);
					SendPropertyChanging();
					_Id = value;
					SendPropertyChanged("Id");
					OnIdChanged();
				}
			}
		}
		
		partial void OnNameChanging(string value);
		partial void OnNameChanged();
		private string _Name;
		[Column(Storage=@"_Name", Name=@"cName", DbType=@"NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get { return _Name; }
			set {
				if (_Name != value) {
					OnNameChanging(value);
					SendPropertyChanging();
					_Name = value;
					SendPropertyChanged("Name");
					OnNameChanged();
				}
			}
		}
		
		partial void OnDescriptionChanging(string value);
		partial void OnDescriptionChanged();
		private string _Description;
		[Column(Storage=@"_Description", Name=@"cDescription", DbType=@"NVarChar(256)")]
		public string Description
		{
			get { return _Description; }
			set {
				if (_Description != value) {
					OnDescriptionChanging(value);
					SendPropertyChanging();
					_Description = value;
					SendPropertyChanged("Description");
					OnDescriptionChanged();
				}
			}
		}
		
		partial void OnAllowCrossPublishingChanging(bool? value);
		partial void OnAllowCrossPublishingChanged();
		private bool? _AllowCrossPublishing;
		[Column(Storage=@"_AllowCrossPublishing", Name=@"cAllowCrossPublishing", DbType=@"Bit")]
		public bool? AllowCrossPublishing
		{
			get { return _AllowCrossPublishing; }
			set {
				if (_AllowCrossPublishing != value) {
					OnAllowCrossPublishingChanging(value);
					SendPropertyChanging();
					_AllowCrossPublishing = value;
					SendPropertyChanged("AllowCrossPublishing");
					OnAllowCrossPublishingChanged();
				}
			}
		}
		
		partial void OnInfoNameChanging(string value);
		partial void OnInfoNameChanged();
		private string _InfoName;
		[Column(Storage=@"_InfoName", Name=@"cInfoName", DbType=@"NVarChar(256)")]
		public string InfoName
		{
			get { return _InfoName; }
			set {
				if (_InfoName != value) {
					OnInfoNameChanging(value);
					SendPropertyChanging();
					_InfoName = value;
					SendPropertyChanged("InfoName");
					OnInfoNameChanged();
				}
			}
		}
		
		partial void OnInfoAdressChanging(string value);
		partial void OnInfoAdressChanged();
		private string _InfoAdress;
		[Column(Storage=@"_InfoAdress", Name=@"cInfoAdress", DbType=@"NVarChar(256)")]
		public string InfoAdress
		{
			get { return _InfoAdress; }
			set {
				if (_InfoAdress != value) {
					OnInfoAdressChanging(value);
					SendPropertyChanging();
					_InfoAdress = value;
					SendPropertyChanged("InfoAdress");
					OnInfoAdressChanged();
				}
			}
		}
		
		partial void OnInfoVisitAdressChanging(string value);
		partial void OnInfoVisitAdressChanged();
		private string _InfoVisitAdress;
		[Column(Storage=@"_InfoVisitAdress", Name=@"cInfoVisitAdress", DbType=@"NVarChar(256)")]
		public string InfoVisitAdress
		{
			get { return _InfoVisitAdress; }
			set {
				if (_InfoVisitAdress != value) {
					OnInfoVisitAdressChanging(value);
					SendPropertyChanging();
					_InfoVisitAdress = value;
					SendPropertyChanged("InfoVisitAdress");
					OnInfoVisitAdressChanged();
				}
			}
		}
		
		partial void OnInfoZipCodeChanging(string value);
		partial void OnInfoZipCodeChanged();
		private string _InfoZipCode;
		[Column(Storage=@"_InfoZipCode", Name=@"cInfoZipCode", DbType=@"NVarChar(256)")]
		public string InfoZipCode
		{
			get { return _InfoZipCode; }
			set {
				if (_InfoZipCode != value) {
					OnInfoZipCodeChanging(value);
					SendPropertyChanging();
					_InfoZipCode = value;
					SendPropertyChanged("InfoZipCode");
					OnInfoZipCodeChanged();
				}
			}
		}
		
		partial void OnInfoCityChanging(string value);
		partial void OnInfoCityChanged();
		private string _InfoCity;
		[Column(Storage=@"_InfoCity", Name=@"cInfoCity", DbType=@"NVarChar(256)")]
		public string InfoCity
		{
			get { return _InfoCity; }
			set {
				if (_InfoCity != value) {
					OnInfoCityChanging(value);
					SendPropertyChanging();
					_InfoCity = value;
					SendPropertyChanged("InfoCity");
					OnInfoCityChanged();
				}
			}
		}
		
		partial void OnInfoPhoneChanging(string value);
		partial void OnInfoPhoneChanged();
		private string _InfoPhone;
		[Column(Storage=@"_InfoPhone", Name=@"cInfoPhone", DbType=@"NVarChar(256)")]
		public string InfoPhone
		{
			get { return _InfoPhone; }
			set {
				if (_InfoPhone != value) {
					OnInfoPhoneChanging(value);
					SendPropertyChanging();
					_InfoPhone = value;
					SendPropertyChanged("InfoPhone");
					OnInfoPhoneChanged();
				}
			}
		}
		
		partial void OnInfoFaxChanging(string value);
		partial void OnInfoFaxChanged();
		private string _InfoFax;
		[Column(Storage=@"_InfoFax", Name=@"cInfoFax", DbType=@"NVarChar(256)")]
		public string InfoFax
		{
			get { return _InfoFax; }
			set {
				if (_InfoFax != value) {
					OnInfoFaxChanging(value);
					SendPropertyChanging();
					_InfoFax = value;
					SendPropertyChanged("InfoFax");
					OnInfoFaxChanged();
				}
			}
		}
		
		partial void OnInfoEmailChanging(string value);
		partial void OnInfoEmailChanged();
		private string _InfoEmail;
		[Column(Storage=@"_InfoEmail", Name=@"cInfoEmail", DbType=@"NVarChar(256)")]
		public string InfoEmail
		{
			get { return _InfoEmail; }
			set {
				if (_InfoEmail != value) {
					OnInfoEmailChanging(value);
					SendPropertyChanging();
					_InfoEmail = value;
					SendPropertyChanged("InfoEmail");
					OnInfoEmailChanged();
				}
			}
		}
		
		partial void OnInfoCopyRightInfoChanging(string value);
		partial void OnInfoCopyRightInfoChanged();
		private string _InfoCopyRightInfo;
		[Column(Storage=@"_InfoCopyRightInfo", Name=@"cInfoCopyRightInfo", DbType=@"NVarChar(256)")]
		public string InfoCopyRightInfo
		{
			get { return _InfoCopyRightInfo; }
			set {
				if (_InfoCopyRightInfo != value) {
					OnInfoCopyRightInfoChanging(value);
					SendPropertyChanging();
					_InfoCopyRightInfo = value;
					SendPropertyChanged("InfoCopyRightInfo");
					OnInfoCopyRightInfoChanged();
				}
			}
		}
		
		partial void OnInfoWebMasterChanging(string value);
		partial void OnInfoWebMasterChanged();
		private string _InfoWebMaster;
		[Column(Storage=@"_InfoWebMaster", Name=@"cInfoWebMaster", DbType=@"NVarChar(256)")]
		public string InfoWebMaster
		{
			get { return _InfoWebMaster; }
			set {
				if (_InfoWebMaster != value) {
					OnInfoWebMasterChanging(value);
					SendPropertyChanging();
					_InfoWebMaster = value;
					SendPropertyChanged("InfoWebMaster");
					OnInfoWebMasterChanged();
				}
			}
		}
		
		partial void OnAlias1Changing(string value);
		partial void OnAlias1Changed();
		private string _Alias1;
		[Column(Storage=@"_Alias1", Name=@"cAlias1", DbType=@"NVarChar(256)")]
		public string Alias1
		{
			get { return _Alias1; }
			set {
				if (_Alias1 != value) {
					OnAlias1Changing(value);
					SendPropertyChanging();
					_Alias1 = value;
					SendPropertyChanged("Alias1");
					OnAlias1Changed();
				}
			}
		}
		
		partial void OnAlias2Changing(string value);
		partial void OnAlias2Changed();
		private string _Alias2;
		[Column(Storage=@"_Alias2", Name=@"cAlias2", DbType=@"NVarChar(256)")]
		public string Alias2
		{
			get { return _Alias2; }
			set {
				if (_Alias2 != value) {
					OnAlias2Changing(value);
					SendPropertyChanging();
					_Alias2 = value;
					SendPropertyChanged("Alias2");
					OnAlias2Changed();
				}
			}
		}
		
		partial void OnAlias3Changing(string value);
		partial void OnAlias3Changed();
		private string _Alias3;
		[Column(Storage=@"_Alias3", Name=@"cAlias3", DbType=@"NVarChar(256)")]
		public string Alias3
		{
			get { return _Alias3; }
			set {
				if (_Alias3 != value) {
					OnAlias3Changing(value);
					SendPropertyChanging();
					_Alias3 = value;
					SendPropertyChanged("Alias3");
					OnAlias3Changed();
				}
			}
		}
		
		partial void OnPublishPathChanging(string value);
		partial void OnPublishPathChanged();
		private string _PublishPath;
		[Column(Storage=@"_PublishPath", Name=@"cPublishPath", DbType=@"NVarChar(256)")]
		public string PublishPath
		{
			get { return _PublishPath; }
			set {
				if (_PublishPath != value) {
					OnPublishPathChanging(value);
					SendPropertyChanging();
					_PublishPath = value;
					SendPropertyChanged("PublishPath");
					OnPublishPathChanged();
				}
			}
		}
		
		partial void OnRootPathChanging(string value);
		partial void OnRootPathChanged();
		private string _RootPath;
		[Column(Storage=@"_RootPath", Name=@"cRootPath", DbType=@"NVarChar(256)")]
		public string RootPath
		{
			get { return _RootPath; }
			set {
				if (_RootPath != value) {
					OnRootPathChanging(value);
					SendPropertyChanging();
					_RootPath = value;
					SendPropertyChanged("RootPath");
					OnRootPathChanged();
				}
			}
		}
		
		partial void OnPublishActiveChanging(bool? value);
		partial void OnPublishActiveChanged();
		private bool? _PublishActive;
		[Column(Storage=@"_PublishActive", Name=@"cPublishActive", DbType=@"Bit")]
		public bool? PublishActive
		{
			get { return _PublishActive; }
			set {
				if (_PublishActive != value) {
					OnPublishActiveChanging(value);
					SendPropertyChanging();
					_PublishActive = value;
					SendPropertyChanged("PublishActive");
					OnPublishActiveChanged();
				}
			}
		}
		
		partial void OnFtpPublishActiveChanging(bool? value);
		partial void OnFtpPublishActiveChanged();
		private bool? _FtpPublishActive;
		[Column(Storage=@"_FtpPublishActive", Name=@"cFtpPublishActive", DbType=@"Bit")]
		public bool? FtpPublishActive
		{
			get { return _FtpPublishActive; }
			set {
				if (_FtpPublishActive != value) {
					OnFtpPublishActiveChanging(value);
					SendPropertyChanging();
					_FtpPublishActive = value;
					SendPropertyChanged("FtpPublishActive");
					OnFtpPublishActiveChanged();
				}
			}
		}
		
		partial void OnFtpPassiveChanging(bool? value);
		partial void OnFtpPassiveChanged();
		private bool? _FtpPassive;
		[Column(Storage=@"_FtpPassive", Name=@"cFtpPassive", DbType=@"Bit")]
		public bool? FtpPassive
		{
			get { return _FtpPassive; }
			set {
				if (_FtpPassive != value) {
					OnFtpPassiveChanging(value);
					SendPropertyChanging();
					_FtpPassive = value;
					SendPropertyChanged("FtpPassive");
					OnFtpPassiveChanged();
				}
			}
		}
		
		partial void OnFtpUserNameChanging(string value);
		partial void OnFtpUserNameChanged();
		private string _FtpUserName;
		[Column(Storage=@"_FtpUserName", Name=@"cFtpUserName", DbType=@"NVarChar(256)")]
		public string FtpUserName
		{
			get { return _FtpUserName; }
			set {
				if (_FtpUserName != value) {
					OnFtpUserNameChanging(value);
					SendPropertyChanging();
					_FtpUserName = value;
					SendPropertyChanged("FtpUserName");
					OnFtpUserNameChanged();
				}
			}
		}
		
		partial void OnFtpPasswordChanging(string value);
		partial void OnFtpPasswordChanged();
		private string _FtpPassword;
		[Column(Storage=@"_FtpPassword", Name=@"cFtpPassword", DbType=@"NVarChar(256)")]
		public string FtpPassword
		{
			get { return _FtpPassword; }
			set {
				if (_FtpPassword != value) {
					OnFtpPasswordChanging(value);
					SendPropertyChanging();
					_FtpPassword = value;
					SendPropertyChanged("FtpPassword");
					OnFtpPasswordChanged();
				}
			}
		}
		
		partial void OnFtpSiteChanging(string value);
		partial void OnFtpSiteChanged();
		private string _FtpSite;
		[Column(Storage=@"_FtpSite", Name=@"cFtpSite", DbType=@"NVarChar(256)")]
		public string FtpSite
		{
			get { return _FtpSite; }
			set {
				if (_FtpSite != value) {
					OnFtpSiteChanging(value);
					SendPropertyChanging();
					_FtpSite = value;
					SendPropertyChanged("FtpSite");
					OnFtpSiteChanged();
				}
			}
		}
		
		partial void OnExtranetChanging(bool? value);
		partial void OnExtranetChanged();
		private bool? _Extranet;
		[Column(Storage=@"_Extranet", Name=@"cExtranet", DbType=@"Bit")]
		public bool? Extranet
		{
			get { return _Extranet; }
			set {
				if (_Extranet != value) {
					OnExtranetChanging(value);
					SendPropertyChanging();
					_Extranet = value;
					SendPropertyChanged("Extranet");
					OnExtranetChanged();
				}
			}
		}
		
		partial void OnDocTypeChanging(int value);
		partial void OnDocTypeChanged();
		private int _DocType;
		[Column(Storage=@"_DocType", Name=@"cDocType", DbType=@"Int NOT NULL", CanBeNull=false)]
		public int DocType
		{
			get { return _DocType; }
			set {
				if (_DocType != value) {
					OnDocTypeChanging(value);
					SendPropertyChanging();
					_DocType = value;
					SendPropertyChanged("DocType");
					OnDocTypeChanged();
				}
			}
		}
		
		partial void OnDocSubTypeChanging(int value);
		partial void OnDocSubTypeChanged();
		private int _DocSubType;
		[Column(Storage=@"_DocSubType", Name=@"cDocSubType", DbType=@"Int NOT NULL", CanBeNull=false)]
		public int DocSubType
		{
			get { return _DocSubType; }
			set {
				if (_DocSubType != value) {
					OnDocSubTypeChanging(value);
					SendPropertyChanging();
					_DocSubType = value;
					SendPropertyChanged("DocSubType");
					OnDocSubTypeChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntitySet<EBaseUser> _tblBaseUsers;
		[Association(Name=@"tblBaseLocation_tblBaseUser", Storage=@"_tblBaseUsers", ThisKey=@"Id", OtherKey=@"DefaultLocation")]
		public EntitySet<EBaseUser> BaseUsers
		{
			get {
				return _tblBaseUsers;
			}
			set {
				_tblBaseUsers.Assign(value);
			}
		}

		private void AttachBaseUsers(EBaseUser entity)
		{
			SendPropertyChanging();
			entity.DefaultBaseLocation = this;
		}
		
		private void DetachBaseUsers(EBaseUser entity)
		{
			SendPropertyChanging();
			entity.DefaultBaseLocation = null;
		}
		#endregion

		#region Converters
		
		/// <summary>
		/// Converts from EBaseLocation to BaseLocation.
		/// </summary>
		/// <param name="eBaseLocation">The EBaseLocation.</param>
		/// <returns>The converted BaseLocation.</returns>

		public static BaseLocation Convert (EBaseLocation eBaseLocation)
		{
			BaseLocation baseLocation = new BaseLocation
			{
				Id = eBaseLocation.Id,
				Name = eBaseLocation.Name,
				Description = eBaseLocation.Description,
				AllowCrossPublishing = eBaseLocation.AllowCrossPublishing,
				InfoName = eBaseLocation.InfoName,
				InfoAdress = eBaseLocation.InfoAdress,
				InfoVisitAdress = eBaseLocation.InfoVisitAdress,
				InfoZipCode = eBaseLocation.InfoZipCode,
				InfoCity = eBaseLocation.InfoCity,
				InfoPhone = eBaseLocation.InfoPhone,
				InfoFax = eBaseLocation.InfoFax,
				InfoEmail = eBaseLocation.InfoEmail,
				InfoCopyRightInfo = eBaseLocation.InfoCopyRightInfo,
				InfoWebMaster = eBaseLocation.InfoWebMaster,
				Alias1 = eBaseLocation.Alias1,
				Alias2 = eBaseLocation.Alias2,
				Alias3 = eBaseLocation.Alias3,
				PublishPath = eBaseLocation.PublishPath,
				RootPath = eBaseLocation.RootPath,
				PublishActive = eBaseLocation.PublishActive,
				FtpPublishActive = eBaseLocation.FtpPublishActive,
				FtpPassive = eBaseLocation.FtpPassive,
				FtpUserName = eBaseLocation.FtpUserName,
				FtpPassword = eBaseLocation.FtpPassword,
				FtpSite = eBaseLocation.FtpSite,
				Extranet = eBaseLocation.Extranet,
				DocType = eBaseLocation.DocType,
				DocSubType = eBaseLocation.DocSubType,
			};
			
			return baseLocation;
		}
		
		/// <summary>
		/// Converts from BaseLocation to EBaseLocation.
		/// </summary>
		/// <param name="baseLocation">The BaseLocation.</param>
		/// <returns>The converted EBaseLocation.</returns>

		public static EBaseLocation Convert (BaseLocation baseLocation)
		{		
			return new EBaseLocation
			{
				Id = baseLocation.Id,
				Name = baseLocation.Name,
				Description = baseLocation.Description,
				AllowCrossPublishing = baseLocation.AllowCrossPublishing,
				InfoName = baseLocation.InfoName,
				InfoAdress = baseLocation.InfoAdress,
				InfoVisitAdress = baseLocation.InfoVisitAdress,
				InfoZipCode = baseLocation.InfoZipCode,
				InfoCity = baseLocation.InfoCity,
				InfoPhone = baseLocation.InfoPhone,
				InfoFax = baseLocation.InfoFax,
				InfoEmail = baseLocation.InfoEmail,
				InfoCopyRightInfo = baseLocation.InfoCopyRightInfo,
				InfoWebMaster = baseLocation.InfoWebMaster,
				Alias1 = baseLocation.Alias1,
				Alias2 = baseLocation.Alias2,
				Alias3 = baseLocation.Alias3,
				PublishPath = baseLocation.PublishPath,
				RootPath = baseLocation.RootPath,
				PublishActive = baseLocation.PublishActive,
				FtpPublishActive = baseLocation.FtpPublishActive,
				FtpPassive = baseLocation.FtpPassive,
				FtpUserName = baseLocation.FtpUserName,
				FtpPassword = baseLocation.FtpPassword,
				FtpSite = baseLocation.FtpSite,
				Extranet = baseLocation.Extranet,
				DocType = baseLocation.DocType,
				DocSubType = baseLocation.DocSubType,
			};
		}

		#endregion
	}
}
#pragma warning restore 1591
