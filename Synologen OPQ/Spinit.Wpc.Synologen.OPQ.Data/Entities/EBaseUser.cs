#pragma warning disable 1591

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Spinit's LINQ to SQL template for T4 C#
//     Generated at 10/27/2009 15:39:30
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq.Expressions;

using Spinit.Data.Linq;

using Spinit.Wpc.Synologen.OPQ.Core.Entities;

namespace Spinit.Wpc.Synologen.OPQ.Data.Entities
{	
	[Table(Name=@"dbo.tblBaseUsers")]
	public partial class EBaseUser : EntityBase
	{
		#region Spinit search extension
		
		/// <summary>
		/// Creates a lambda-expression for use with the data-load-option feature,
		/// </summary>
		/// <param name="property">The property to search-for.</param>
		/// <returns>A lambda-expression.</returns>

		public override LambdaExpression BuildSearchExpression (string property)
		{
			ParameterExpression parameter = Expression.Parameter (GetType (), "eBaseUser");
			return Expression.Lambda<Func<EBaseUser, object>> (
						Expression.Property (parameter, property),
						parameter);
		}
		
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public EBaseUser()
		{
			_SynologenOpqDocumentHistories = new EntitySet<EDocumentHistory>(AttachDocumentHistories, DetachDocumentHistories);
			_SynologenOpqNodeSupplierConnections = new EntitySet<ENodeSupplierConnection>(AttachNodeSupplierConnections, DetachNodeSupplierConnections);
			_SynologenOpqDocuments = new EntitySet<EDocument>(AttachDocuments, DetachDocuments);
			_SynologenOpqDocuments1 = new EntitySet<EDocument>(AttachDocuments1, DetachDocuments1);
			_SynologenOpqDocuments2 = new EntitySet<EDocument>(AttachDocuments2, DetachDocuments2);
			_SynologenOpqDocuments3 = new EntitySet<EDocument>(AttachDocuments3, DetachDocuments3);
			_SynologenOpqFileCategories = new EntitySet<EFileCategory>(AttachFileCategories, DetachFileCategories);
			_SynologenOpqFileCategories1 = new EntitySet<EFileCategory>(AttachFileCategories1, DetachFileCategories1);
			_SynologenOpqFiles = new EntitySet<EFile>(AttachFiles, DetachFiles);
			_SynologenOpqFiles1 = new EntitySet<EFile>(AttachFiles1, DetachFiles1);
			_SynologenOpqFiles2 = new EntitySet<EFile>(AttachFiles2, DetachFiles2);
			_SynologenOpqFiles3 = new EntitySet<EFile>(AttachFiles3, DetachFiles3);
			_SynologenOpqNodes = new EntitySet<ENode>(AttachNodes, DetachNodes);
			_SynologenOpqNodes1 = new EntitySet<ENode>(AttachNodes1, DetachNodes1);
			_SynologenOpqNodes2 = new EntitySet<ENode>(AttachNodes2, DetachNodes2);
			_SynologenOpqNodes3 = new EntitySet<ENode>(AttachNodes3, DetachNodes3);
			_tblMemberUserConnections = default(EntityRef<EMemberUserConnection>); 
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnIdChanging(int value);
		partial void OnIdChanged();
		private int _Id;
		[Column(Storage=@"_Id", Name=@"cId", AutoSync=AutoSync.OnInsert, DbType=@"Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get { return _Id; }
			set {
				if (_Id != value) {
					OnIdChanging(value);
					SendPropertyChanging();
					_Id = value;
					SendPropertyChanged("Id");
					OnIdChanged();
				}
			}
		}
		
		partial void OnUserNameChanging(string value);
		partial void OnUserNameChanged();
		private string _UserName;
		[Column(Storage=@"_UserName", Name=@"cUserName", DbType=@"NVarChar(100) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get { return _UserName; }
			set {
				if (_UserName != value) {
					OnUserNameChanging(value);
					SendPropertyChanging();
					_UserName = value;
					SendPropertyChanged("UserName");
					OnUserNameChanged();
				}
			}
		}
		
		partial void OnPasswordChanging(string value);
		partial void OnPasswordChanged();
		private string _Password;
		[Column(Storage=@"_Password", Name=@"cPassword", DbType=@"NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get { return _Password; }
			set {
				if (_Password != value) {
					OnPasswordChanging(value);
					SendPropertyChanging();
					_Password = value;
					SendPropertyChanged("Password");
					OnPasswordChanged();
				}
			}
		}
		
		partial void OnFirstNameChanging(string value);
		partial void OnFirstNameChanged();
		private string _FirstName;
		[Column(Storage=@"_FirstName", Name=@"cFirstName", DbType=@"NVarChar(100)")]
		public string FirstName
		{
			get { return _FirstName; }
			set {
				if (_FirstName != value) {
					OnFirstNameChanging(value);
					SendPropertyChanging();
					_FirstName = value;
					SendPropertyChanged("FirstName");
					OnFirstNameChanged();
				}
			}
		}
		
		partial void OnLastNameChanging(string value);
		partial void OnLastNameChanged();
		private string _LastName;
		[Column(Storage=@"_LastName", Name=@"cLastName", DbType=@"NVarChar(100)")]
		public string LastName
		{
			get { return _LastName; }
			set {
				if (_LastName != value) {
					OnLastNameChanging(value);
					SendPropertyChanging();
					_LastName = value;
					SendPropertyChanged("LastName");
					OnLastNameChanged();
				}
			}
		}
		
		partial void OnEmailChanging(string value);
		partial void OnEmailChanged();
		private string _Email;
		[Column(Storage=@"_Email", Name=@"cEmail", DbType=@"NVarChar(512)")]
		public string Email
		{
			get { return _Email; }
			set {
				if (_Email != value) {
					OnEmailChanging(value);
					SendPropertyChanging();
					_Email = value;
					SendPropertyChanged("Email");
					OnEmailChanged();
				}
			}
		}
		
		partial void OnDefaultLocationChanging(int? value);
		partial void OnDefaultLocationChanged();
		private int? _DefaultLocation;
		[Column(Storage=@"_DefaultLocation", Name=@"cDefaultLocation", DbType=@"Int")]
		public int? DefaultLocation
		{
			get { return _DefaultLocation; }
			set {
				if (_DefaultLocation != value) {
					OnDefaultLocationChanging(value);
					SendPropertyChanging();
					_DefaultLocation = value;
					SendPropertyChanged("DefaultLocation");
					OnDefaultLocationChanged();
				}
			}
		}
		
		partial void OnActiveChanging(bool value);
		partial void OnActiveChanged();
		private bool _Active;
		[Column(Storage=@"_Active", Name=@"cActive", DbType=@"Bit NOT NULL", CanBeNull=false)]
		public bool Active
		{
			get { return _Active; }
			set {
				if (_Active != value) {
					OnActiveChanging(value);
					SendPropertyChanging();
					_Active = value;
					SendPropertyChanged("Active");
					OnActiveChanged();
				}
			}
		}
		
		partial void OnCreatedByChanging(string value);
		partial void OnCreatedByChanged();
		private string _CreatedBy;
		[Column(Storage=@"_CreatedBy", Name=@"cCreatedBy", DbType=@"NVarChar(100)")]
		public string CreatedBy
		{
			get { return _CreatedBy; }
			set {
				if (_CreatedBy != value) {
					OnCreatedByChanging(value);
					SendPropertyChanging();
					_CreatedBy = value;
					SendPropertyChanged("CreatedBy");
					OnCreatedByChanged();
				}
			}
		}
		
		partial void OnCreatedDateChanging(DateTime? value);
		partial void OnCreatedDateChanged();
		private DateTime? _CreatedDate;
		[Column(Storage=@"_CreatedDate", Name=@"cCreatedDate", DbType=@"DateTime")]
		public DateTime? CreatedDate
		{
			get { return _CreatedDate; }
			set {
				if (_CreatedDate != value) {
					OnCreatedDateChanging(value);
					SendPropertyChanging();
					_CreatedDate = value;
					SendPropertyChanged("CreatedDate");
					OnCreatedDateChanged();
				}
			}
		}
		
		partial void OnChangedByChanging(string value);
		partial void OnChangedByChanged();
		private string _ChangedBy;
		[Column(Storage=@"_ChangedBy", Name=@"cChangedBy", DbType=@"NVarChar(100)")]
		public string ChangedBy
		{
			get { return _ChangedBy; }
			set {
				if (_ChangedBy != value) {
					OnChangedByChanging(value);
					SendPropertyChanging();
					_ChangedBy = value;
					SendPropertyChanged("ChangedBy");
					OnChangedByChanged();
				}
			}
		}
		
		partial void OnChangedDateChanging(DateTime? value);
		partial void OnChangedDateChanged();
		private DateTime? _ChangedDate;
		[Column(Storage=@"_ChangedDate", Name=@"cChangedDate", DbType=@"DateTime")]
		public DateTime? ChangedDate
		{
			get { return _ChangedDate; }
			set {
				if (_ChangedDate != value) {
					OnChangedDateChanging(value);
					SendPropertyChanging();
					_ChangedDate = value;
					SendPropertyChanged("ChangedDate");
					OnChangedDateChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntitySet<EDocumentHistory> _SynologenOpqDocumentHistories;
		[Association(Name=@"tblBaseUser_SynologenOpqDocumentHistory", Storage=@"_SynologenOpqDocumentHistories", ThisKey=@"Id", OtherKey=@"HistoryId")]
		public EntitySet<EDocumentHistory> DocumentHistories
		{
			get {
				return _SynologenOpqDocumentHistories;
			}
			set {
				_SynologenOpqDocumentHistories.Assign(value);
			}
		}

		private void AttachDocumentHistories(EDocumentHistory entity)
		{
			SendPropertyChanging();
			entity.HistoryIdUser = this;
		}
		
		private void DetachDocumentHistories(EDocumentHistory entity)
		{
			SendPropertyChanging();
			entity.HistoryIdUser = null;
		}
		private EntitySet<ENodeSupplierConnection> _SynologenOpqNodeSupplierConnections;
		[Association(Name=@"tblBaseUser_SynologenOpqNodeSupplierConnection", Storage=@"_SynologenOpqNodeSupplierConnections", ThisKey=@"Id", OtherKey=@"SupId")]
		public EntitySet<ENodeSupplierConnection> NodeSupplierConnections
		{
			get {
				return _SynologenOpqNodeSupplierConnections;
			}
			set {
				_SynologenOpqNodeSupplierConnections.Assign(value);
			}
		}

		private void AttachNodeSupplierConnections(ENodeSupplierConnection entity)
		{
			SendPropertyChanging();
			entity.BaseUser = this;
		}
		
		private void DetachNodeSupplierConnections(ENodeSupplierConnection entity)
		{
			SendPropertyChanging();
			entity.BaseUser = null;
		}
		private EntitySet<EDocument> _SynologenOpqDocuments;
		[Association(Name=@"tblBaseUser_SynologenOpqDocument", Storage=@"_SynologenOpqDocuments", ThisKey=@"Id", OtherKey=@"CreatedById")]
		public EntitySet<EDocument> CreatedByDocuments
		{
			get {
				return _SynologenOpqDocuments;
			}
			set {
				_SynologenOpqDocuments.Assign(value);
			}
		}

		private void AttachDocuments(EDocument entity)
		{
			SendPropertyChanging();
			entity.CreatedBy = this;
		}
		
		private void DetachDocuments(EDocument entity)
		{
			SendPropertyChanging();
			entity.CreatedBy = null;
		}
		private EntitySet<EDocument> _SynologenOpqDocuments1;
		[Association(Name=@"tblBaseUser_SynologenOpqDocument1", Storage=@"_SynologenOpqDocuments1", ThisKey=@"Id", OtherKey=@"ChangedById")]
		public EntitySet<EDocument> ChangedByDocuments
		{
			get {
				return _SynologenOpqDocuments1;
			}
			set {
				_SynologenOpqDocuments1.Assign(value);
			}
		}

		private void AttachDocuments1(EDocument entity)
		{
			SendPropertyChanging();
			entity.ChangedBy = this;
		}
		
		private void DetachDocuments1(EDocument entity)
		{
			SendPropertyChanging();
			entity.ChangedBy = null;
		}
		private EntitySet<EDocument> _SynologenOpqDocuments2;
		[Association(Name=@"tblBaseUser_SynologenOpqDocument2", Storage=@"_SynologenOpqDocuments2", ThisKey=@"Id", OtherKey=@"ApprovedById")]
		public EntitySet<EDocument> ApprovedByDocuments
		{
			get {
				return _SynologenOpqDocuments2;
			}
			set {
				_SynologenOpqDocuments2.Assign(value);
			}
		}

		private void AttachDocuments2(EDocument entity)
		{
			SendPropertyChanging();
			entity.ApprovedBy = this;
		}
		
		private void DetachDocuments2(EDocument entity)
		{
			SendPropertyChanging();
			entity.ApprovedBy = null;
		}
		private EntitySet<EDocument> _SynologenOpqDocuments3;
		[Association(Name=@"tblBaseUser_SynologenOpqDocument3", Storage=@"_SynologenOpqDocuments3", ThisKey=@"Id", OtherKey=@"LockedById")]
		public EntitySet<EDocument> LockedByDocuments
		{
			get {
				return _SynologenOpqDocuments3;
			}
			set {
				_SynologenOpqDocuments3.Assign(value);
			}
		}

		private void AttachDocuments3(EDocument entity)
		{
			SendPropertyChanging();
			entity.LockedBy = this;
		}
		
		private void DetachDocuments3(EDocument entity)
		{
			SendPropertyChanging();
			entity.LockedBy = null;
		}
		private EntitySet<EFileCategory> _SynologenOpqFileCategories;
		[Association(Name=@"tblBaseUser_SynologenOpqFileCategory", Storage=@"_SynologenOpqFileCategories", ThisKey=@"Id", OtherKey=@"CreatedById")]
		public EntitySet<EFileCategory> CreatedByFileCategories
		{
			get {
				return _SynologenOpqFileCategories;
			}
			set {
				_SynologenOpqFileCategories.Assign(value);
			}
		}

		private void AttachFileCategories(EFileCategory entity)
		{
			SendPropertyChanging();
			entity.CreatedBy = this;
		}
		
		private void DetachFileCategories(EFileCategory entity)
		{
			SendPropertyChanging();
			entity.CreatedBy = null;
		}
		private EntitySet<EFileCategory> _SynologenOpqFileCategories1;
		[Association(Name=@"tblBaseUser_SynologenOpqFileCategory1", Storage=@"_SynologenOpqFileCategories1", ThisKey=@"Id", OtherKey=@"ChangedById")]
		public EntitySet<EFileCategory> ChangedByFileCategories
		{
			get {
				return _SynologenOpqFileCategories1;
			}
			set {
				_SynologenOpqFileCategories1.Assign(value);
			}
		}

		private void AttachFileCategories1(EFileCategory entity)
		{
			SendPropertyChanging();
			entity.ChangedBy = this;
		}
		
		private void DetachFileCategories1(EFileCategory entity)
		{
			SendPropertyChanging();
			entity.ChangedBy = null;
		}
		private EntitySet<EFile> _SynologenOpqFiles;
		[Association(Name=@"tblBaseUser_SynologenOpqFile", Storage=@"_SynologenOpqFiles", ThisKey=@"Id", OtherKey=@"CreatedById")]
		public EntitySet<EFile> CreatedByFiles
		{
			get {
				return _SynologenOpqFiles;
			}
			set {
				_SynologenOpqFiles.Assign(value);
			}
		}

		private void AttachFiles(EFile entity)
		{
			SendPropertyChanging();
			entity.CreatedBy = this;
		}
		
		private void DetachFiles(EFile entity)
		{
			SendPropertyChanging();
			entity.CreatedBy = null;
		}
		private EntitySet<EFile> _SynologenOpqFiles1;
		[Association(Name=@"tblBaseUser_SynologenOpqFile1", Storage=@"_SynologenOpqFiles1", ThisKey=@"Id", OtherKey=@"ChangedById")]
		public EntitySet<EFile> ChangedByFiles
		{
			get {
				return _SynologenOpqFiles1;
			}
			set {
				_SynologenOpqFiles1.Assign(value);
			}
		}

		private void AttachFiles1(EFile entity)
		{
			SendPropertyChanging();
			entity.ChangedBy = this;
		}
		
		private void DetachFiles1(EFile entity)
		{
			SendPropertyChanging();
			entity.ChangedBy = null;
		}
		private EntitySet<EFile> _SynologenOpqFiles2;
		[Association(Name=@"tblBaseUser_SynologenOpqFile2", Storage=@"_SynologenOpqFiles2", ThisKey=@"Id", OtherKey=@"ApprovedById")]
		public EntitySet<EFile> ApprovedByFiles
		{
			get {
				return _SynologenOpqFiles2;
			}
			set {
				_SynologenOpqFiles2.Assign(value);
			}
		}

		private void AttachFiles2(EFile entity)
		{
			SendPropertyChanging();
			entity.ApprovedBy = this;
		}
		
		private void DetachFiles2(EFile entity)
		{
			SendPropertyChanging();
			entity.ApprovedBy = null;
		}
		private EntitySet<EFile> _SynologenOpqFiles3;
		[Association(Name=@"tblBaseUser_SynologenOpqFile3", Storage=@"_SynologenOpqFiles3", ThisKey=@"Id", OtherKey=@"LockedById")]
		public EntitySet<EFile> LockedByFiles
		{
			get {
				return _SynologenOpqFiles3;
			}
			set {
				_SynologenOpqFiles3.Assign(value);
			}
		}

		private void AttachFiles3(EFile entity)
		{
			SendPropertyChanging();
			entity.LockedBy = this;
		}
		
		private void DetachFiles3(EFile entity)
		{
			SendPropertyChanging();
			entity.LockedBy = null;
		}
		private EntitySet<ENode> _SynologenOpqNodes;
		[Association(Name=@"tblBaseUser_SynologenOpqNode", Storage=@"_SynologenOpqNodes", ThisKey=@"Id", OtherKey=@"CreatedById")]
		public EntitySet<ENode> CreatedByNodes
		{
			get {
				return _SynologenOpqNodes;
			}
			set {
				_SynologenOpqNodes.Assign(value);
			}
		}

		private void AttachNodes(ENode entity)
		{
			SendPropertyChanging();
			entity.CreatedBy = this;
		}
		
		private void DetachNodes(ENode entity)
		{
			SendPropertyChanging();
			entity.CreatedBy = null;
		}
		private EntitySet<ENode> _SynologenOpqNodes1;
		[Association(Name=@"tblBaseUser_SynologenOpqNode1", Storage=@"_SynologenOpqNodes1", ThisKey=@"Id", OtherKey=@"ChangedById")]
		public EntitySet<ENode> ChangedByNodes
		{
			get {
				return _SynologenOpqNodes1;
			}
			set {
				_SynologenOpqNodes1.Assign(value);
			}
		}

		private void AttachNodes1(ENode entity)
		{
			SendPropertyChanging();
			entity.ChangedBy = this;
		}
		
		private void DetachNodes1(ENode entity)
		{
			SendPropertyChanging();
			entity.ChangedBy = null;
		}
		private EntitySet<ENode> _SynologenOpqNodes2;
		[Association(Name=@"tblBaseUser_SynologenOpqNode2", Storage=@"_SynologenOpqNodes2", ThisKey=@"Id", OtherKey=@"ApprovedById")]
		public EntitySet<ENode> ApprovedByNodes
		{
			get {
				return _SynologenOpqNodes2;
			}
			set {
				_SynologenOpqNodes2.Assign(value);
			}
		}

		private void AttachNodes2(ENode entity)
		{
			SendPropertyChanging();
			entity.ApprovedBy = this;
		}
		
		private void DetachNodes2(ENode entity)
		{
			SendPropertyChanging();
			entity.ApprovedBy = null;
		}
		private EntitySet<ENode> _SynologenOpqNodes3;
		[Association(Name=@"tblBaseUser_SynologenOpqNode3", Storage=@"_SynologenOpqNodes3", ThisKey=@"Id", OtherKey=@"LockedById")]
		public EntitySet<ENode> LockedByNodes
		{
			get {
				return _SynologenOpqNodes3;
			}
			set {
				_SynologenOpqNodes3.Assign(value);
			}
		}

		private void AttachNodes3(ENode entity)
		{
			SendPropertyChanging();
			entity.LockedBy = this;
		}
		
		private void DetachNodes3(ENode entity)
		{
			SendPropertyChanging();
			entity.LockedBy = null;
		}
		private EntityRef<EMemberUserConnection> _tblMemberUserConnections;
		[Association(Name=@"tblBaseUser_tblMemberUserConnection", Storage=@"_tblMemberUserConnections", ThisKey=@"Id", OtherKey=@"UserId", IsUnique=true, IsForeignKey=false)]
		public EMemberUserConnection MemberUserConnections
		{
			get {
				return _tblMemberUserConnections.Entity;
			}
			set {
				EMemberUserConnection previousValue = _tblMemberUserConnections.Entity;
				if ((previousValue != value) || (!_tblMemberUserConnections.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_tblMemberUserConnections.Entity = null;
						previousValue.BaseUser = null;
					}
					_tblMemberUserConnections.Entity = value;
					if (value != null) {
						value.BaseUser = this;
					}
					SendPropertyChanged("MemberUserConnections");
				}
			}
		}

		#endregion

		#region Converters
		
		/// <summary>
		/// Converts from EBaseUser to BaseUser.
		/// </summary>
		/// <param name="eBaseUser">The EBaseUser.</param>
		/// <returns>The converted BaseUser.</returns>

		public static BaseUser Convert (EBaseUser eBaseUser)
		{
			BaseUser baseUser = new BaseUser
			{
				Id = eBaseUser.Id,
				UserName = eBaseUser.UserName,
				Password = eBaseUser.Password,
				FirstName = eBaseUser.FirstName,
				LastName = eBaseUser.LastName,
				Email = eBaseUser.Email,
				DefaultLocation = eBaseUser.DefaultLocation,
				Active = eBaseUser.Active,
				CreatedBy = eBaseUser.CreatedBy,
				CreatedDate = eBaseUser.CreatedDate,
				ChangedBy = eBaseUser.ChangedBy,
				ChangedDate = eBaseUser.ChangedDate,
			};
			
			return baseUser;
		}
		
		/// <summary>
		/// Converts from BaseUser to EBaseUser.
		/// </summary>
		/// <param name="baseUser">The BaseUser.</param>
		/// <returns>The converted EBaseUser.</returns>

		public static EBaseUser Convert (BaseUser baseUser)
		{		
			return new EBaseUser
			{
				Id = baseUser.Id,
				UserName = baseUser.UserName,
				Password = baseUser.Password,
				FirstName = baseUser.FirstName,
				LastName = baseUser.LastName,
				Email = baseUser.Email,
				DefaultLocation = baseUser.DefaultLocation,
				Active = baseUser.Active,
				CreatedBy = baseUser.CreatedBy,
				CreatedDate = baseUser.CreatedDate,
				ChangedBy = baseUser.ChangedBy,
				ChangedDate = baseUser.ChangedDate,
			};
		}

		#endregion
	}
}
#pragma warning restore 1591
