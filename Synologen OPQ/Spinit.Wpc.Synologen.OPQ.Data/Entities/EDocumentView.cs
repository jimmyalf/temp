#pragma warning disable 1591

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Spinit's LINQ to SQL template for T4 C#
//     Generated at 10/27/2009 15:39:30
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq.Expressions;

using Spinit.Data.Linq;

using Spinit.Wpc.Synologen.OPQ.Core.Entities;

namespace Spinit.Wpc.Synologen.OPQ.Data.Entities
{	
	[Table(Name=@"dbo.DocumentView")]
	public partial class EDocumentView : EntityBase
	{
		#region Spinit search extension
		
		/// <summary>
		/// Creates a lambda-expression for use with the data-load-option feature,
		/// </summary>
		/// <param name="property">The property to search-for.</param>
		/// <returns>A lambda-expression.</returns>

		public override LambdaExpression BuildSearchExpression (string property)
		{
			ParameterExpression parameter = Expression.Parameter (GetType (), "eDocumentView");
			return Expression.Lambda<Func<EDocumentView, object>> (
						Expression.Property (parameter, property),
						parameter);
		}
		
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		#endregion

		#region Construction
		public EDocumentView()
		{
		}
		#endregion

		#region Column Mappings
		partial void OnIdChanging(int value);
		partial void OnIdChanged();
		private int _Id;
		[Column(Storage=@"_Id", DbType=@"Int NOT NULL", CanBeNull=false)]
		public int Id
		{
			get { return _Id; }
			set {
				if (_Id != value) {
					OnIdChanging(value);
					SendPropertyChanging();
					_Id = value;
					SendPropertyChanged("Id");
					OnIdChanged();
				}
			}
		}
		
		partial void OnHistoryDateChanging(DateTime? value);
		partial void OnHistoryDateChanged();
		private DateTime? _HistoryDate;
		[Column(Storage=@"_HistoryDate", DbType=@"DateTime")]
		public DateTime? HistoryDate
		{
			get { return _HistoryDate; }
			set {
				if (_HistoryDate != value) {
					OnHistoryDateChanging(value);
					SendPropertyChanging();
					_HistoryDate = value;
					SendPropertyChanged("HistoryDate");
					OnHistoryDateChanged();
				}
			}
		}
		
		partial void OnIsActiveChanging(bool value);
		partial void OnIsActiveChanged();
		private bool _IsActive;
		[Column(Storage=@"_IsActive", DbType=@"Bit NOT NULL", CanBeNull=false)]
		public bool IsActive
		{
			get { return _IsActive; }
			set {
				if (_IsActive != value) {
					OnIsActiveChanging(value);
					SendPropertyChanging();
					_IsActive = value;
					SendPropertyChanged("IsActive");
					OnIsActiveChanged();
				}
			}
		}
		
		partial void OnApprovedByIdChanging(int? value);
		partial void OnApprovedByIdChanged();
		private int? _ApprovedById;
		[Column(Storage=@"_ApprovedById", DbType=@"Int")]
		public int? ApprovedById
		{
			get { return _ApprovedById; }
			set {
				if (_ApprovedById != value) {
					OnApprovedByIdChanging(value);
					SendPropertyChanging();
					_ApprovedById = value;
					SendPropertyChanged("ApprovedById");
					OnApprovedByIdChanged();
				}
			}
		}
		
		partial void OnApprovedByNameChanging(string value);
		partial void OnApprovedByNameChanged();
		private string _ApprovedByName;
		[Column(Storage=@"_ApprovedByName", DbType=@"NVarChar(100)")]
		public string ApprovedByName
		{
			get { return _ApprovedByName; }
			set {
				if (_ApprovedByName != value) {
					OnApprovedByNameChanging(value);
					SendPropertyChanging();
					_ApprovedByName = value;
					SendPropertyChanged("ApprovedByName");
					OnApprovedByNameChanged();
				}
			}
		}
		
		partial void OnApprovedDateChanging(DateTime? value);
		partial void OnApprovedDateChanged();
		private DateTime? _ApprovedDate;
		[Column(Storage=@"_ApprovedDate", DbType=@"DateTime")]
		public DateTime? ApprovedDate
		{
			get { return _ApprovedDate; }
			set {
				if (_ApprovedDate != value) {
					OnApprovedDateChanging(value);
					SendPropertyChanging();
					_ApprovedDate = value;
					SendPropertyChanged("ApprovedDate");
					OnApprovedDateChanged();
				}
			}
		}
		
		partial void OnLockedByIdChanging(int? value);
		partial void OnLockedByIdChanged();
		private int? _LockedById;
		[Column(Storage=@"_LockedById", DbType=@"Int")]
		public int? LockedById
		{
			get { return _LockedById; }
			set {
				if (_LockedById != value) {
					OnLockedByIdChanging(value);
					SendPropertyChanging();
					_LockedById = value;
					SendPropertyChanged("LockedById");
					OnLockedByIdChanged();
				}
			}
		}
		
		partial void OnLockedByNameChanging(string value);
		partial void OnLockedByNameChanged();
		private string _LockedByName;
		[Column(Storage=@"_LockedByName", DbType=@"NVarChar(100)")]
		public string LockedByName
		{
			get { return _LockedByName; }
			set {
				if (_LockedByName != value) {
					OnLockedByNameChanging(value);
					SendPropertyChanging();
					_LockedByName = value;
					SendPropertyChanged("LockedByName");
					OnLockedByNameChanged();
				}
			}
		}
		
		partial void OnLockedDateChanging(DateTime? value);
		partial void OnLockedDateChanged();
		private DateTime? _LockedDate;
		[Column(Storage=@"_LockedDate", DbType=@"DateTime")]
		public DateTime? LockedDate
		{
			get { return _LockedDate; }
			set {
				if (_LockedDate != value) {
					OnLockedDateChanging(value);
					SendPropertyChanging();
					_LockedDate = value;
					SendPropertyChanged("LockedDate");
					OnLockedDateChanged();
				}
			}
		}
		
		#endregion

		#region Converters
		
		/// <summary>
		/// Converts from EDocumentView to DocumentView.
		/// </summary>
		/// <param name="eDocumentView">The EDocumentView.</param>
		/// <returns>The converted DocumentView.</returns>

		public static DocumentView Convert (EDocumentView eDocumentView)
		{
			DocumentView documentView = new DocumentView
			{
				Id = eDocumentView.Id,
				HistoryDate = eDocumentView.HistoryDate,
				IsActive = eDocumentView.IsActive,
				ApprovedById = eDocumentView.ApprovedById,
				ApprovedByName = eDocumentView.ApprovedByName,
				ApprovedDate = eDocumentView.ApprovedDate,
				LockedById = eDocumentView.LockedById,
				LockedByName = eDocumentView.LockedByName,
				LockedDate = eDocumentView.LockedDate,
			};
			
			return documentView;
		}
		
		/// <summary>
		/// Converts from DocumentView to EDocumentView.
		/// </summary>
		/// <param name="documentView">The DocumentView.</param>
		/// <returns>The converted EDocumentView.</returns>

		public static EDocumentView Convert (DocumentView documentView)
		{		
			return new EDocumentView
			{
				Id = documentView.Id,
				HistoryDate = documentView.HistoryDate,
				IsActive = documentView.IsActive,
				ApprovedById = documentView.ApprovedById,
				ApprovedByName = documentView.ApprovedByName,
				ApprovedDate = documentView.ApprovedDate,
				LockedById = documentView.LockedById,
				LockedByName = documentView.LockedByName,
				LockedDate = documentView.LockedDate,
			};
		}

		#endregion
	}
}
#pragma warning restore 1591
