#pragma warning disable 1591

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Spinit's LINQ to SQL template for T4 C#
//     Generated at 06/07/2012 10:51:22
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq.Expressions;

using Spinit.Data.Linq;

using Spinit.Wpc.Synologen.OPQ.Core.Entities;

namespace Spinit.Wpc.Synologen.OPQ.Data.Entities
{	
	[Table(Name=@"dbo.tblForumUsers")]
	public partial class EForumUser : EntityBase
	{
		#region Spinit search extension
		
		/// <summary>
		/// Creates a lambda-expression for use with the data-load-option feature,
		/// </summary>
		/// <param name="property">The property to search-for.</param>
		/// <returns>A lambda-expression.</returns>

		public override LambdaExpression BuildSearchExpression (string property)
		{
			ParameterExpression parameter = Expression.Parameter (GetType (), "eForumUser");
			return Expression.Lambda<Func<EForumUser, object>> (
						Expression.Property (parameter, property),
						parameter);
		}
		
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public EForumUser()
		{
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnUserIDChanging(int value);
		partial void OnUserIDChanged();
		private int _UserID;
		[Column(Storage=@"_UserID", AutoSync=AutoSync.OnInsert, DbType=@"Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int UserID
		{
			get { return _UserID; }
			set {
				if (_UserID != value) {
					OnUserIDChanging(value);
					SendPropertyChanging();
					_UserID = value;
					SendPropertyChanged("UserID");
					OnUserIDChanged();
				}
			}
		}
		
		partial void OnUserNameChanging(string value);
		partial void OnUserNameChanged();
		private string _UserName;
		[Column(Storage=@"_UserName", DbType=@"NVarChar(64) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get { return _UserName; }
			set {
				if (_UserName != value) {
					OnUserNameChanging(value);
					SendPropertyChanging();
					_UserName = value;
					SendPropertyChanged("UserName");
					OnUserNameChanged();
				}
			}
		}
		
		partial void OnPasswordChanging(string value);
		partial void OnPasswordChanged();
		private string _Password;
		[Column(Storage=@"_Password", DbType=@"NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get { return _Password; }
			set {
				if (_Password != value) {
					OnPasswordChanging(value);
					SendPropertyChanging();
					_Password = value;
					SendPropertyChanged("Password");
					OnPasswordChanged();
				}
			}
		}
		
		partial void OnPasswordFormatChanging(short value);
		partial void OnPasswordFormatChanged();
		private short _PasswordFormat;
		[Column(Storage=@"_PasswordFormat", DbType=@"SmallInt NOT NULL", CanBeNull=false)]
		public short PasswordFormat
		{
			get { return _PasswordFormat; }
			set {
				if (_PasswordFormat != value) {
					OnPasswordFormatChanging(value);
					SendPropertyChanging();
					_PasswordFormat = value;
					SendPropertyChanged("PasswordFormat");
					OnPasswordFormatChanged();
				}
			}
		}
		
		partial void OnSaltChanging(string value);
		partial void OnSaltChanged();
		private string _Salt;
		[Column(Storage=@"_Salt", DbType=@"VarChar(24) NOT NULL", CanBeNull=false)]
		public string Salt
		{
			get { return _Salt; }
			set {
				if (_Salt != value) {
					OnSaltChanging(value);
					SendPropertyChanging();
					_Salt = value;
					SendPropertyChanged("Salt");
					OnSaltChanged();
				}
			}
		}
		
		partial void OnPasswordQuestionChanging(string value);
		partial void OnPasswordQuestionChanged();
		private string _PasswordQuestion;
		[Column(Storage=@"_PasswordQuestion", DbType=@"NVarChar(256)")]
		public string PasswordQuestion
		{
			get { return _PasswordQuestion; }
			set {
				if (_PasswordQuestion != value) {
					OnPasswordQuestionChanging(value);
					SendPropertyChanging();
					_PasswordQuestion = value;
					SendPropertyChanged("PasswordQuestion");
					OnPasswordQuestionChanged();
				}
			}
		}
		
		partial void OnPasswordAnswerChanging(string value);
		partial void OnPasswordAnswerChanged();
		private string _PasswordAnswer;
		[Column(Storage=@"_PasswordAnswer", DbType=@"NVarChar(256)")]
		public string PasswordAnswer
		{
			get { return _PasswordAnswer; }
			set {
				if (_PasswordAnswer != value) {
					OnPasswordAnswerChanging(value);
					SendPropertyChanging();
					_PasswordAnswer = value;
					SendPropertyChanged("PasswordAnswer");
					OnPasswordAnswerChanged();
				}
			}
		}
		
		partial void OnEmailChanging(string value);
		partial void OnEmailChanged();
		private string _Email;
		[Column(Storage=@"_Email", DbType=@"NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get { return _Email; }
			set {
				if (_Email != value) {
					OnEmailChanging(value);
					SendPropertyChanging();
					_Email = value;
					SendPropertyChanged("Email");
					OnEmailChanged();
				}
			}
		}
		
		partial void OnDateCreatedChanging(DateTime value);
		partial void OnDateCreatedChanged();
		private DateTime _DateCreated;
		[Column(Storage=@"_DateCreated", DbType=@"DateTime NOT NULL", CanBeNull=false)]
		public DateTime DateCreated
		{
			get { return _DateCreated; }
			set {
				if (_DateCreated != value) {
					OnDateCreatedChanging(value);
					SendPropertyChanging();
					_DateCreated = value;
					SendPropertyChanged("DateCreated");
					OnDateCreatedChanged();
				}
			}
		}
		
		partial void OnLastLoginChanging(DateTime value);
		partial void OnLastLoginChanged();
		private DateTime _LastLogin;
		[Column(Storage=@"_LastLogin", DbType=@"DateTime NOT NULL", CanBeNull=false)]
		public DateTime LastLogin
		{
			get { return _LastLogin; }
			set {
				if (_LastLogin != value) {
					OnLastLoginChanging(value);
					SendPropertyChanging();
					_LastLogin = value;
					SendPropertyChanged("LastLogin");
					OnLastLoginChanged();
				}
			}
		}
		
		partial void OnLastActivityChanging(DateTime value);
		partial void OnLastActivityChanged();
		private DateTime _LastActivity;
		[Column(Storage=@"_LastActivity", DbType=@"DateTime NOT NULL", CanBeNull=false)]
		public DateTime LastActivity
		{
			get { return _LastActivity; }
			set {
				if (_LastActivity != value) {
					OnLastActivityChanging(value);
					SendPropertyChanging();
					_LastActivity = value;
					SendPropertyChanged("LastActivity");
					OnLastActivityChanged();
				}
			}
		}
		
		partial void OnLastActionChanging(string value);
		partial void OnLastActionChanged();
		private string _LastAction;
		[Column(Storage=@"_LastAction", DbType=@"NVarChar(1024) NOT NULL", CanBeNull=false)]
		public string LastAction
		{
			get { return _LastAction; }
			set {
				if (_LastAction != value) {
					OnLastActionChanging(value);
					SendPropertyChanging();
					_LastAction = value;
					SendPropertyChanged("LastAction");
					OnLastActionChanged();
				}
			}
		}
		
		partial void OnUserAccountStatusChanging(short value);
		partial void OnUserAccountStatusChanged();
		private short _UserAccountStatus;
		[Column(Storage=@"_UserAccountStatus", DbType=@"SmallInt NOT NULL", CanBeNull=false)]
		public short UserAccountStatus
		{
			get { return _UserAccountStatus; }
			set {
				if (_UserAccountStatus != value) {
					OnUserAccountStatusChanging(value);
					SendPropertyChanging();
					_UserAccountStatus = value;
					SendPropertyChanged("UserAccountStatus");
					OnUserAccountStatusChanged();
				}
			}
		}
		
		partial void OnIsAnonymousChanging(bool value);
		partial void OnIsAnonymousChanged();
		private bool _IsAnonymous;
		[Column(Storage=@"_IsAnonymous", DbType=@"Bit NOT NULL", CanBeNull=false)]
		public bool IsAnonymous
		{
			get { return _IsAnonymous; }
			set {
				if (_IsAnonymous != value) {
					OnIsAnonymousChanging(value);
					SendPropertyChanging();
					_IsAnonymous = value;
					SendPropertyChanged("IsAnonymous");
					OnIsAnonymousChanged();
				}
			}
		}
		
		partial void OnForceLoginChanging(bool value);
		partial void OnForceLoginChanged();
		private bool _ForceLogin;
		[Column(Storage=@"_ForceLogin", DbType=@"Bit NOT NULL", CanBeNull=false)]
		public bool ForceLogin
		{
			get { return _ForceLogin; }
			set {
				if (_ForceLogin != value) {
					OnForceLoginChanging(value);
					SendPropertyChanging();
					_ForceLogin = value;
					SendPropertyChanged("ForceLogin");
					OnForceLoginChanged();
				}
			}
		}
		
		partial void OnAppUserTokenChanging(string value);
		partial void OnAppUserTokenChanged();
		private string _AppUserToken;
		[Column(Storage=@"_AppUserToken", DbType=@"VarChar(128)")]
		public string AppUserToken
		{
			get { return _AppUserToken; }
			set {
				if (_AppUserToken != value) {
					OnAppUserTokenChanging(value);
					SendPropertyChanging();
					_AppUserToken = value;
					SendPropertyChanged("AppUserToken");
					OnAppUserTokenChanged();
				}
			}
		}
		
		#endregion

		#region Converters
		
		/// <summary>
		/// Converts from EForumUser to ForumUser.
		/// </summary>
		/// <param name="eForumUser">The EForumUser.</param>
		/// <returns>The converted ForumUser.</returns>

		public static ForumUser Convert (EForumUser eForumUser)
		{
			ForumUser forumUser = new ForumUser
			{
				UserID = eForumUser.UserID,
				UserName = eForumUser.UserName,
				Password = eForumUser.Password,
				PasswordFormat = eForumUser.PasswordFormat,
				Salt = eForumUser.Salt,
				PasswordQuestion = eForumUser.PasswordQuestion,
				PasswordAnswer = eForumUser.PasswordAnswer,
				Email = eForumUser.Email,
				DateCreated = eForumUser.DateCreated,
				LastLogin = eForumUser.LastLogin,
				LastActivity = eForumUser.LastActivity,
				LastAction = eForumUser.LastAction,
				UserAccountStatus = eForumUser.UserAccountStatus,
				IsAnonymous = eForumUser.IsAnonymous,
				ForceLogin = eForumUser.ForceLogin,
				AppUserToken = eForumUser.AppUserToken,
			};
			
			return forumUser;
		}
		
		/// <summary>
		/// Converts from ForumUser to EForumUser.
		/// </summary>
		/// <param name="forumUser">The ForumUser.</param>
		/// <returns>The converted EForumUser.</returns>

		public static EForumUser Convert (ForumUser forumUser)
		{		
			return new EForumUser
			{
				UserID = forumUser.UserID,
				UserName = forumUser.UserName,
				Password = forumUser.Password,
				PasswordFormat = forumUser.PasswordFormat,
				Salt = forumUser.Salt,
				PasswordQuestion = forumUser.PasswordQuestion,
				PasswordAnswer = forumUser.PasswordAnswer,
				Email = forumUser.Email,
				DateCreated = forumUser.DateCreated,
				LastLogin = forumUser.LastLogin,
				LastActivity = forumUser.LastActivity,
				LastAction = forumUser.LastAction,
				UserAccountStatus = forumUser.UserAccountStatus,
				IsAnonymous = forumUser.IsAnonymous,
				ForceLogin = forumUser.ForceLogin,
				AppUserToken = forumUser.AppUserToken,
			};
		}

		#endregion
	}
}
#pragma warning restore 1591
