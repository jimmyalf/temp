#pragma warning disable 1591

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Spinit's LINQ to SQL template for T4 C#
//     Generated at 06/04/2012 12:03:10
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq.Expressions;

using Spinit.Data.Linq;

using Spinit.Wpc.Synologen.OPQ.Core.Entities;

namespace Spinit.Wpc.Synologen.OPQ.Data.Entities
{	
	[Table(Name=@"dbo.tblMembers")]
	public partial class EMember : EntityBase
	{
		#region Spinit search extension
		
		/// <summary>
		/// Creates a lambda-expression for use with the data-load-option feature,
		/// </summary>
		/// <param name="property">The property to search-for.</param>
		/// <returns>A lambda-expression.</returns>

		public override LambdaExpression BuildSearchExpression (string property)
		{
			ParameterExpression parameter = Expression.Parameter (GetType (), "eMember");
			return Expression.Lambda<Func<EMember, object>> (
						Expression.Property (parameter, property),
						parameter);
		}
		
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public EMember()
		{
			_tblMemberUserConnections = new EntitySet<EMemberUserConnection>(AttachMemberUserConnections, DetachMemberUserConnections);
			_tblSynologenShopMemberConnections = new EntitySet<EShopMemberConnection>(AttachShopMemberConnections, DetachShopMemberConnections);
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnIdChanging(int value);
		partial void OnIdChanged();
		private int _Id;
		[Column(Storage=@"_Id", Name=@"cId", AutoSync=AutoSync.OnInsert, DbType=@"Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get { return _Id; }
			set {
				if (_Id != value) {
					OnIdChanging(value);
					SendPropertyChanging();
					_Id = value;
					SendPropertyChanged("Id");
					OnIdChanged();
				}
			}
		}
		
		partial void OnOrgNameChanging(string value);
		partial void OnOrgNameChanged();
		private string _OrgName;
		[Column(Storage=@"_OrgName", Name=@"cOrgName", DbType=@"NVarChar(255) NOT NULL", CanBeNull=false)]
		public string OrgName
		{
			get { return _OrgName; }
			set {
				if (_OrgName != value) {
					OnOrgNameChanging(value);
					SendPropertyChanging();
					_OrgName = value;
					SendPropertyChanged("OrgName");
					OnOrgNameChanged();
				}
			}
		}
		
		partial void OnActiveChanging(bool value);
		partial void OnActiveChanged();
		private bool _Active;
		[Column(Storage=@"_Active", Name=@"cActive", DbType=@"Bit NOT NULL", CanBeNull=false)]
		public bool Active
		{
			get { return _Active; }
			set {
				if (_Active != value) {
					OnActiveChanging(value);
					SendPropertyChanging();
					_Active = value;
					SendPropertyChanged("Active");
					OnActiveChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntitySet<EMemberUserConnection> _tblMemberUserConnections;
		[Association(Name=@"tblMember_tblMemberUserConnection", Storage=@"_tblMemberUserConnections", ThisKey=@"Id", OtherKey=@"MemberId")]
		public EntitySet<EMemberUserConnection> MemberUserConnections
		{
			get {
				return _tblMemberUserConnections;
			}
			set {
				_tblMemberUserConnections.Assign(value);
			}
		}

		private void AttachMemberUserConnections(EMemberUserConnection entity)
		{
			SendPropertyChanging();
			entity.Member = this;
		}
		
		private void DetachMemberUserConnections(EMemberUserConnection entity)
		{
			SendPropertyChanging();
			entity.Member = null;
		}
		private EntitySet<EShopMemberConnection> _tblSynologenShopMemberConnections;
		[Association(Name=@"tblMember_tblSynologenShopMemberConnection", Storage=@"_tblSynologenShopMemberConnections", ThisKey=@"Id", OtherKey=@"MemberId")]
		public EntitySet<EShopMemberConnection> ShopMemberConnections
		{
			get {
				return _tblSynologenShopMemberConnections;
			}
			set {
				_tblSynologenShopMemberConnections.Assign(value);
			}
		}

		private void AttachShopMemberConnections(EShopMemberConnection entity)
		{
			SendPropertyChanging();
			entity.Member = this;
		}
		
		private void DetachShopMemberConnections(EShopMemberConnection entity)
		{
			SendPropertyChanging();
			entity.Member = null;
		}
		#endregion

		#region Converters
		
		/// <summary>
		/// Converts from EMember to Member.
		/// </summary>
		/// <param name="eMember">The EMember.</param>
		/// <returns>The converted Member.</returns>

		public static Member Convert (EMember eMember)
		{
			Member member = new Member
			{
				Id = eMember.Id,
				OrgName = eMember.OrgName,
				Active = eMember.Active,
			};
			
			return member;
		}
		
		/// <summary>
		/// Converts from Member to EMember.
		/// </summary>
		/// <param name="member">The Member.</param>
		/// <returns>The converted EMember.</returns>

		public static EMember Convert (Member member)
		{		
			return new EMember
			{
				Id = member.Id,
				OrgName = member.OrgName,
				Active = member.Active,
			};
		}

		#endregion
	}
}
#pragma warning restore 1591
