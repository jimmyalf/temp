#pragma warning disable 1591

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Spinit's LINQ to SQL template for T4 C#
//     Generated at 11/12/2009 09:00:11
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq.Expressions;

using Spinit.Data.Linq;

using Spinit.Wpc.Synologen.OPQ.Core.Entities;

namespace Spinit.Wpc.Synologen.OPQ.Data.Entities
{	
	[Table(Name=@"dbo.tblMemberUserConnection")]
	public partial class EMemberUserConnection : EntityBase
	{
		#region Spinit search extension
		
		/// <summary>
		/// Creates a lambda-expression for use with the data-load-option feature,
		/// </summary>
		/// <param name="property">The property to search-for.</param>
		/// <returns>A lambda-expression.</returns>

		public override LambdaExpression BuildSearchExpression (string property)
		{
			ParameterExpression parameter = Expression.Parameter (GetType (), "eMemberUserConnection");
			return Expression.Lambda<Func<EMemberUserConnection, object>> (
						Expression.Property (parameter, property),
						parameter);
		}
		
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public EMemberUserConnection()
		{
			_tblMember = default(EntityRef<EMember>); 
			_tblBaseUser = default(EntityRef<EBaseUser>); 
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnMemberIdChanging(int value);
		partial void OnMemberIdChanged();
		private int _MemberId;
		[Column(Storage=@"_MemberId", Name=@"cMemberId", DbType=@"Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int MemberId
		{
			get { return _MemberId; }
			set {
				if (_MemberId != value) {
					if (_tblMember.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnMemberIdChanging(value);
					SendPropertyChanging();
					_MemberId = value;
					SendPropertyChanged("MemberId");
					OnMemberIdChanged();
				}
			}
		}
		
		partial void OnUserIdChanging(int value);
		partial void OnUserIdChanged();
		private int _UserId;
		[Column(Storage=@"_UserId", Name=@"cUserId", DbType=@"Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int UserId
		{
			get { return _UserId; }
			set {
				if (_UserId != value) {
					if (_tblBaseUser.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnUserIdChanging(value);
					SendPropertyChanging();
					_UserId = value;
					SendPropertyChanged("UserId");
					OnUserIdChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntityRef<EMember> _tblMember;
		[Association(Name=@"tblMember_tblMemberUserConnection", Storage=@"_tblMember", ThisKey=@"MemberId", OtherKey=@"Id", IsForeignKey=true)]
		public EMember Member
		{
			get {
				return _tblMember.Entity;
			}
			set {
				EMember previousValue = _tblMember.Entity;
				if ((previousValue != value) || (!_tblMember.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_tblMember.Entity = null;
						previousValue.MemberUserConnections = null;
					}
					_tblMember.Entity = value;
					if (value != null) {
						value.MemberUserConnections = this;
						_MemberId = value.Id;
					}
					else {
						_MemberId = default(int);
					}
					SendPropertyChanged("Member");
				}
			}
		}

		private EntityRef<EBaseUser> _tblBaseUser;
		[Association(Name=@"tblBaseUser_tblMemberUserConnection", Storage=@"_tblBaseUser", ThisKey=@"UserId", OtherKey=@"Id", IsForeignKey=true)]
		public EBaseUser BaseUser
		{
			get {
				return _tblBaseUser.Entity;
			}
			set {
				EBaseUser previousValue = _tblBaseUser.Entity;
				if ((previousValue != value) || (!_tblBaseUser.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_tblBaseUser.Entity = null;
						previousValue.MemberUserConnections = null;
					}
					_tblBaseUser.Entity = value;
					if (value != null) {
						value.MemberUserConnections = this;
						_UserId = value.Id;
					}
					else {
						_UserId = default(int);
					}
					SendPropertyChanged("BaseUser");
				}
			}
		}

		#endregion

		#region Converters
		
		/// <summary>
		/// Converts from EMemberUserConnection to MemberUserConnection.
		/// </summary>
		/// <param name="eMemberUserConnection">The EMemberUserConnection.</param>
		/// <returns>The converted MemberUserConnection.</returns>

		public static MemberUserConnection Convert (EMemberUserConnection eMemberUserConnection)
		{
			MemberUserConnection memberUserConnection = new MemberUserConnection
			{
				MemberId = eMemberUserConnection.MemberId,
				UserId = eMemberUserConnection.UserId,
			};
			
			return memberUserConnection;
		}
		
		/// <summary>
		/// Converts from MemberUserConnection to EMemberUserConnection.
		/// </summary>
		/// <param name="memberUserConnection">The MemberUserConnection.</param>
		/// <returns>The converted EMemberUserConnection.</returns>

		public static EMemberUserConnection Convert (MemberUserConnection memberUserConnection)
		{		
			return new EMemberUserConnection
			{
				MemberId = memberUserConnection.MemberId,
				UserId = memberUserConnection.UserId,
			};
		}

		#endregion
	}
}
#pragma warning restore 1591
