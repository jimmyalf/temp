#pragma warning disable 1591

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Spinit's LINQ to SQL template for T4 C#
//     Generated at 06/07/2012 10:51:22
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq.Expressions;

using Spinit.Data.Linq;

using Spinit.Wpc.Synologen.OPQ.Core.Entities;

namespace Spinit.Wpc.Synologen.OPQ.Data.Entities
{	
	[Table(Name=@"dbo.tblSynologenShop")]
	public partial class EShop : EntityBase
	{
		#region Spinit search extension
		
		/// <summary>
		/// Creates a lambda-expression for use with the data-load-option feature,
		/// </summary>
		/// <param name="property">The property to search-for.</param>
		/// <returns>A lambda-expression.</returns>

		public override LambdaExpression BuildSearchExpression (string property)
		{
			ParameterExpression parameter = Expression.Parameter (GetType (), "eShop");
			return Expression.Lambda<Func<EShop, object>> (
						Expression.Property (parameter, property),
						parameter);
		}
		
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public EShop()
		{
			_SynologenOpqFiles = new EntitySet<EFile>(AttachFiles, DetachFiles);
			_SynologenOpqDocuments = new EntitySet<EDocument>(AttachDocuments, DetachDocuments);
			_tblSynologenShopMemberConnections = new EntitySet<EShopMemberConnection>(AttachShopMemberConnections, DetachShopMemberConnections);
			_tblSynologenShopCategory = default(EntityRef<EShopCategory>); 
			_tblSynologenShopGroup = default(EntityRef<EShopGroup>); 
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnIdChanging(int value);
		partial void OnIdChanged();
		private int _Id;
		[Column(Storage=@"_Id", Name=@"cId", AutoSync=AutoSync.OnInsert, DbType=@"Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get { return _Id; }
			set {
				if (_Id != value) {
					OnIdChanging(value);
					SendPropertyChanging();
					_Id = value;
					SendPropertyChanged("Id");
					OnIdChanged();
				}
			}
		}
		
		partial void OnCategoryIdChanging(int value);
		partial void OnCategoryIdChanged();
		private int _CategoryId;
		[Column(Storage=@"_CategoryId", Name=@"cCategoryId", DbType=@"Int NOT NULL", CanBeNull=false)]
		public int CategoryId
		{
			get { return _CategoryId; }
			set {
				if (_CategoryId != value) {
					if (_tblSynologenShopCategory.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnCategoryIdChanging(value);
					SendPropertyChanging();
					_CategoryId = value;
					SendPropertyChanged("CategoryId");
					OnCategoryIdChanged();
				}
			}
		}
		
		partial void OnShopNameChanging(string value);
		partial void OnShopNameChanged();
		private string _ShopName;
		[Column(Storage=@"_ShopName", Name=@"cShopName", DbType=@"NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ShopName
		{
			get { return _ShopName; }
			set {
				if (_ShopName != value) {
					OnShopNameChanging(value);
					SendPropertyChanging();
					_ShopName = value;
					SendPropertyChanged("ShopName");
					OnShopNameChanged();
				}
			}
		}
		
		partial void OnShopNumberChanging(string value);
		partial void OnShopNumberChanged();
		private string _ShopNumber;
		[Column(Storage=@"_ShopNumber", Name=@"cShopNumber", DbType=@"NVarChar(50)")]
		public string ShopNumber
		{
			get { return _ShopNumber; }
			set {
				if (_ShopNumber != value) {
					OnShopNumberChanging(value);
					SendPropertyChanging();
					_ShopNumber = value;
					SendPropertyChanged("ShopNumber");
					OnShopNumberChanged();
				}
			}
		}
		
		partial void OnShopDescriptionChanging(string value);
		partial void OnShopDescriptionChanged();
		private string _ShopDescription;
		[Column(Storage=@"_ShopDescription", Name=@"cShopDescription", DbType=@"NVarChar(255)")]
		public string ShopDescription
		{
			get { return _ShopDescription; }
			set {
				if (_ShopDescription != value) {
					OnShopDescriptionChanging(value);
					SendPropertyChanging();
					_ShopDescription = value;
					SendPropertyChanged("ShopDescription");
					OnShopDescriptionChanged();
				}
			}
		}
		
		partial void OnContactFirstNameChanging(string value);
		partial void OnContactFirstNameChanged();
		private string _ContactFirstName;
		[Column(Storage=@"_ContactFirstName", Name=@"cContactFirstName", DbType=@"NVarChar(50)")]
		public string ContactFirstName
		{
			get { return _ContactFirstName; }
			set {
				if (_ContactFirstName != value) {
					OnContactFirstNameChanging(value);
					SendPropertyChanging();
					_ContactFirstName = value;
					SendPropertyChanged("ContactFirstName");
					OnContactFirstNameChanged();
				}
			}
		}
		
		partial void OnContactLastNameChanging(string value);
		partial void OnContactLastNameChanged();
		private string _ContactLastName;
		[Column(Storage=@"_ContactLastName", Name=@"cContactLastName", DbType=@"NVarChar(50)")]
		public string ContactLastName
		{
			get { return _ContactLastName; }
			set {
				if (_ContactLastName != value) {
					OnContactLastNameChanging(value);
					SendPropertyChanging();
					_ContactLastName = value;
					SendPropertyChanged("ContactLastName");
					OnContactLastNameChanged();
				}
			}
		}
		
		partial void OnEmailChanging(string value);
		partial void OnEmailChanged();
		private string _Email;
		[Column(Storage=@"_Email", Name=@"cEmail", DbType=@"NVarChar(50)")]
		public string Email
		{
			get { return _Email; }
			set {
				if (_Email != value) {
					OnEmailChanging(value);
					SendPropertyChanging();
					_Email = value;
					SendPropertyChanged("Email");
					OnEmailChanged();
				}
			}
		}
		
		partial void OnPhoneChanging(string value);
		partial void OnPhoneChanged();
		private string _Phone;
		[Column(Storage=@"_Phone", Name=@"cPhone", DbType=@"NVarChar(50)")]
		public string Phone
		{
			get { return _Phone; }
			set {
				if (_Phone != value) {
					OnPhoneChanging(value);
					SendPropertyChanging();
					_Phone = value;
					SendPropertyChanged("Phone");
					OnPhoneChanged();
				}
			}
		}
		
		partial void OnPhone2Changing(string value);
		partial void OnPhone2Changed();
		private string _Phone2;
		[Column(Storage=@"_Phone2", Name=@"cPhone2", DbType=@"NVarChar(50)")]
		public string Phone2
		{
			get { return _Phone2; }
			set {
				if (_Phone2 != value) {
					OnPhone2Changing(value);
					SendPropertyChanging();
					_Phone2 = value;
					SendPropertyChanged("Phone2");
					OnPhone2Changed();
				}
			}
		}
		
		partial void OnFaxChanging(string value);
		partial void OnFaxChanged();
		private string _Fax;
		[Column(Storage=@"_Fax", Name=@"cFax", DbType=@"NVarChar(50)")]
		public string Fax
		{
			get { return _Fax; }
			set {
				if (_Fax != value) {
					OnFaxChanging(value);
					SendPropertyChanging();
					_Fax = value;
					SendPropertyChanged("Fax");
					OnFaxChanged();
				}
			}
		}
		
		partial void OnUrlChanging(string value);
		partial void OnUrlChanged();
		private string _Url;
		[Column(Storage=@"_Url", Name=@"cUrl", DbType=@"NVarChar(255)")]
		public string Url
		{
			get { return _Url; }
			set {
				if (_Url != value) {
					OnUrlChanging(value);
					SendPropertyChanging();
					_Url = value;
					SendPropertyChanged("Url");
					OnUrlChanged();
				}
			}
		}
		
		partial void OnMapUrlChanging(string value);
		partial void OnMapUrlChanged();
		private string _MapUrl;
		[Column(Storage=@"_MapUrl", Name=@"cMapUrl", DbType=@"NVarChar(255)")]
		public string MapUrl
		{
			get { return _MapUrl; }
			set {
				if (_MapUrl != value) {
					OnMapUrlChanging(value);
					SendPropertyChanging();
					_MapUrl = value;
					SendPropertyChanged("MapUrl");
					OnMapUrlChanged();
				}
			}
		}
		
		partial void OnAddressChanging(string value);
		partial void OnAddressChanged();
		private string _Address;
		[Column(Storage=@"_Address", Name=@"cAddress", DbType=@"NVarChar(50)")]
		public string Address
		{
			get { return _Address; }
			set {
				if (_Address != value) {
					OnAddressChanging(value);
					SendPropertyChanging();
					_Address = value;
					SendPropertyChanged("Address");
					OnAddressChanged();
				}
			}
		}
		
		partial void OnAddress2Changing(string value);
		partial void OnAddress2Changed();
		private string _Address2;
		[Column(Storage=@"_Address2", Name=@"cAddress2", DbType=@"NVarChar(50)")]
		public string Address2
		{
			get { return _Address2; }
			set {
				if (_Address2 != value) {
					OnAddress2Changing(value);
					SendPropertyChanging();
					_Address2 = value;
					SendPropertyChanged("Address2");
					OnAddress2Changed();
				}
			}
		}
		
		partial void OnZipChanging(string value);
		partial void OnZipChanged();
		private string _Zip;
		[Column(Storage=@"_Zip", Name=@"cZip", DbType=@"NVarChar(50)")]
		public string Zip
		{
			get { return _Zip; }
			set {
				if (_Zip != value) {
					OnZipChanging(value);
					SendPropertyChanging();
					_Zip = value;
					SendPropertyChanged("Zip");
					OnZipChanged();
				}
			}
		}
		
		partial void OnCityChanging(string value);
		partial void OnCityChanged();
		private string _City;
		[Column(Storage=@"_City", Name=@"cCity", DbType=@"NVarChar(50)")]
		public string City
		{
			get { return _City; }
			set {
				if (_City != value) {
					OnCityChanging(value);
					SendPropertyChanging();
					_City = value;
					SendPropertyChanged("City");
					OnCityChanged();
				}
			}
		}
		
		partial void OnActiveChanging(bool value);
		partial void OnActiveChanged();
		private bool _Active;
		[Column(Storage=@"_Active", Name=@"cActive", DbType=@"Bit NOT NULL", CanBeNull=false)]
		public bool Active
		{
			get { return _Active; }
			set {
				if (_Active != value) {
					OnActiveChanging(value);
					SendPropertyChanging();
					_Active = value;
					SendPropertyChanged("Active");
					OnActiveChanged();
				}
			}
		}
		
		partial void OnGiroIdChanging(int? value);
		partial void OnGiroIdChanged();
		private int? _GiroId;
		[Column(Storage=@"_GiroId", Name=@"cGiroId", DbType=@"Int")]
		public int? GiroId
		{
			get { return _GiroId; }
			set {
				if (_GiroId != value) {
					OnGiroIdChanging(value);
					SendPropertyChanging();
					_GiroId = value;
					SendPropertyChanged("GiroId");
					OnGiroIdChanged();
				}
			}
		}
		
		partial void OnGiroNumberChanging(string value);
		partial void OnGiroNumberChanged();
		private string _GiroNumber;
		[Column(Storage=@"_GiroNumber", Name=@"cGiroNumber", DbType=@"NVarChar(50)")]
		public string GiroNumber
		{
			get { return _GiroNumber; }
			set {
				if (_GiroNumber != value) {
					OnGiroNumberChanging(value);
					SendPropertyChanging();
					_GiroNumber = value;
					SendPropertyChanged("GiroNumber");
					OnGiroNumberChanged();
				}
			}
		}
		
		partial void OnGiroSupplierChanging(string value);
		partial void OnGiroSupplierChanged();
		private string _GiroSupplier;
		[Column(Storage=@"_GiroSupplier", Name=@"cGiroSupplier", DbType=@"NVarChar(100)")]
		public string GiroSupplier
		{
			get { return _GiroSupplier; }
			set {
				if (_GiroSupplier != value) {
					OnGiroSupplierChanging(value);
					SendPropertyChanging();
					_GiroSupplier = value;
					SendPropertyChanged("GiroSupplier");
					OnGiroSupplierChanged();
				}
			}
		}
		
		partial void OnConcernIdChanging(int? value);
		partial void OnConcernIdChanged();
		private int? _ConcernId;
		[Column(Storage=@"_ConcernId", Name=@"cConcernId", DbType=@"Int")]
		public int? ConcernId
		{
			get { return _ConcernId; }
			set {
				if (_ConcernId != value) {
					OnConcernIdChanging(value);
					SendPropertyChanging();
					_ConcernId = value;
					SendPropertyChanged("ConcernId");
					OnConcernIdChanged();
				}
			}
		}
		
		partial void OnShopAccessChanging(int value);
		partial void OnShopAccessChanged();
		private int _ShopAccess;
		[Column(Storage=@"_ShopAccess", Name=@"cShopAccess", DbType=@"Int NOT NULL", CanBeNull=false)]
		public int ShopAccess
		{
			get { return _ShopAccess; }
			set {
				if (_ShopAccess != value) {
					OnShopAccessChanging(value);
					SendPropertyChanging();
					_ShopAccess = value;
					SendPropertyChanged("ShopAccess");
					OnShopAccessChanged();
				}
			}
		}
		
		partial void OnOrganizationNumberChanging(string value);
		partial void OnOrganizationNumberChanged();
		private string _OrganizationNumber;
		[Column(Storage=@"_OrganizationNumber", Name=@"cOrganizationNumber", DbType=@"NVarChar(50)")]
		public string OrganizationNumber
		{
			get { return _OrganizationNumber; }
			set {
				if (_OrganizationNumber != value) {
					OnOrganizationNumberChanging(value);
					SendPropertyChanging();
					_OrganizationNumber = value;
					SendPropertyChanged("OrganizationNumber");
					OnOrganizationNumberChanged();
				}
			}
		}
		
		partial void OnLatitudeChanging(decimal? value);
		partial void OnLatitudeChanged();
		private decimal? _Latitude;
		[Column(Storage=@"_Latitude", Name=@"cLatitude", DbType=@"Decimal(9,6)")]
		public decimal? Latitude
		{
			get { return _Latitude; }
			set {
				if (_Latitude != value) {
					OnLatitudeChanging(value);
					SendPropertyChanging();
					_Latitude = value;
					SendPropertyChanged("Latitude");
					OnLatitudeChanged();
				}
			}
		}
		
		partial void OnLongitudeChanging(decimal? value);
		partial void OnLongitudeChanged();
		private decimal? _Longitude;
		[Column(Storage=@"_Longitude", Name=@"cLongitude", DbType=@"Decimal(9,6)")]
		public decimal? Longitude
		{
			get { return _Longitude; }
			set {
				if (_Longitude != value) {
					OnLongitudeChanging(value);
					SendPropertyChanging();
					_Longitude = value;
					SendPropertyChanged("Longitude");
					OnLongitudeChanged();
				}
			}
		}
		
		partial void OnExternalAccessUsernameChanging(string value);
		partial void OnExternalAccessUsernameChanged();
		private string _ExternalAccessUsername;
		[Column(Storage=@"_ExternalAccessUsername", Name=@"cExternalAccessUsername", DbType=@"NVarChar(50)")]
		public string ExternalAccessUsername
		{
			get { return _ExternalAccessUsername; }
			set {
				if (_ExternalAccessUsername != value) {
					OnExternalAccessUsernameChanging(value);
					SendPropertyChanging();
					_ExternalAccessUsername = value;
					SendPropertyChanged("ExternalAccessUsername");
					OnExternalAccessUsernameChanged();
				}
			}
		}
		
		partial void OnExternalAccessHashedPasswordChanging(string value);
		partial void OnExternalAccessHashedPasswordChanged();
		private string _ExternalAccessHashedPassword;
		[Column(Storage=@"_ExternalAccessHashedPassword", Name=@"cExternalAccessHashedPassword", DbType=@"NVarChar(50)")]
		public string ExternalAccessHashedPassword
		{
			get { return _ExternalAccessHashedPassword; }
			set {
				if (_ExternalAccessHashedPassword != value) {
					OnExternalAccessHashedPasswordChanging(value);
					SendPropertyChanging();
					_ExternalAccessHashedPassword = value;
					SendPropertyChanged("ExternalAccessHashedPassword");
					OnExternalAccessHashedPasswordChanged();
				}
			}
		}
		
		partial void OnShopGroupIdChanging(int? value);
		partial void OnShopGroupIdChanged();
		private int? _ShopGroupId;
		[Column(Storage=@"_ShopGroupId", Name=@"cShopGroupId", DbType=@"Int")]
		public int? ShopGroupId
		{
			get { return _ShopGroupId; }
			set {
				if (_ShopGroupId != value) {
					if (_tblSynologenShopGroup.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnShopGroupIdChanging(value);
					SendPropertyChanging();
					_ShopGroupId = value;
					SendPropertyChanged("ShopGroupId");
					OnShopGroupIdChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntitySet<EFile> _SynologenOpqFiles;
		[Association(Name=@"tblSynologenShop_SynologenOpqFile", Storage=@"_SynologenOpqFiles", ThisKey=@"Id", OtherKey=@"ShpId")]
		public EntitySet<EFile> Files
		{
			get {
				return _SynologenOpqFiles;
			}
			set {
				_SynologenOpqFiles.Assign(value);
			}
		}

		private void AttachFiles(EFile entity)
		{
			SendPropertyChanging();
			entity.Shop = this;
		}
		
		private void DetachFiles(EFile entity)
		{
			SendPropertyChanging();
			entity.Shop = null;
		}
		private EntitySet<EDocument> _SynologenOpqDocuments;
		[Association(Name=@"tblSynologenShop_SynologenOpqDocument", Storage=@"_SynologenOpqDocuments", ThisKey=@"Id", OtherKey=@"ShpId")]
		public EntitySet<EDocument> Documents
		{
			get {
				return _SynologenOpqDocuments;
			}
			set {
				_SynologenOpqDocuments.Assign(value);
			}
		}

		private void AttachDocuments(EDocument entity)
		{
			SendPropertyChanging();
			entity.Shop = this;
		}
		
		private void DetachDocuments(EDocument entity)
		{
			SendPropertyChanging();
			entity.Shop = null;
		}
		private EntitySet<EShopMemberConnection> _tblSynologenShopMemberConnections;
		[Association(Name=@"tblSynologenShop_tblSynologenShopMemberConnection", Storage=@"_tblSynologenShopMemberConnections", ThisKey=@"Id", OtherKey=@"SynologenShopId")]
		public EntitySet<EShopMemberConnection> ShopMemberConnections
		{
			get {
				return _tblSynologenShopMemberConnections;
			}
			set {
				_tblSynologenShopMemberConnections.Assign(value);
			}
		}

		private void AttachShopMemberConnections(EShopMemberConnection entity)
		{
			SendPropertyChanging();
			entity.Shop = this;
		}
		
		private void DetachShopMemberConnections(EShopMemberConnection entity)
		{
			SendPropertyChanging();
			entity.Shop = null;
		}
		private EntityRef<EShopCategory> _tblSynologenShopCategory;
		[Association(Name=@"tblSynologenShopCategory_tblSynologenShop", Storage=@"_tblSynologenShopCategory", ThisKey=@"CategoryId", OtherKey=@"Id", IsForeignKey=true)]
		public EShopCategory ShopCategory
		{
			get {
				return _tblSynologenShopCategory.Entity;
			}
			set {
				EShopCategory previousValue = _tblSynologenShopCategory.Entity;
				if ((previousValue != value) || (!_tblSynologenShopCategory.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_tblSynologenShopCategory.Entity = null;
						previousValue.Shops.Remove(this);
					}
					_tblSynologenShopCategory.Entity = value;
					if (value != null) {
						value.Shops.Add(this);
						_CategoryId = value.Id;
					}
					else {
						_CategoryId = default(int);
					}
					SendPropertyChanged("ShopCategory");
				}
			}
		}

		private EntityRef<EShopGroup> _tblSynologenShopGroup;
		[Association(Name=@"tblSynologenShopGroup_tblSynologenShop", Storage=@"_tblSynologenShopGroup", ThisKey=@"ShopGroupId", OtherKey=@"Id", IsForeignKey=true)]
		public EShopGroup ShopGroup
		{
			get {
				return _tblSynologenShopGroup.Entity;
			}
			set {
				EShopGroup previousValue = _tblSynologenShopGroup.Entity;
				if ((previousValue != value) || (!_tblSynologenShopGroup.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_tblSynologenShopGroup.Entity = null;
						previousValue.Shops.Remove(this);
					}
					_tblSynologenShopGroup.Entity = value;
					if (value != null) {
						value.Shops.Add(this);
						_ShopGroupId = value.Id;
					}
					else {
						_ShopGroupId = default(int?);
					}
					SendPropertyChanged("ShopGroup");
				}
			}
		}

		#endregion

		#region Converters
		
		/// <summary>
		/// Converts from EShop to Shop.
		/// </summary>
		/// <param name="eShop">The EShop.</param>
		/// <returns>The converted Shop.</returns>

		public static Shop Convert (EShop eShop)
		{
			Shop shop = new Shop
			{
				Id = eShop.Id,
				CategoryId = eShop.CategoryId,
				ShopName = eShop.ShopName,
				ShopNumber = eShop.ShopNumber,
				ShopDescription = eShop.ShopDescription,
				ContactFirstName = eShop.ContactFirstName,
				ContactLastName = eShop.ContactLastName,
				Email = eShop.Email,
				Phone = eShop.Phone,
				Phone2 = eShop.Phone2,
				Fax = eShop.Fax,
				Url = eShop.Url,
				MapUrl = eShop.MapUrl,
				Address = eShop.Address,
				Address2 = eShop.Address2,
				Zip = eShop.Zip,
				City = eShop.City,
				Active = eShop.Active,
				GiroId = eShop.GiroId,
				GiroNumber = eShop.GiroNumber,
				GiroSupplier = eShop.GiroSupplier,
				ConcernId = eShop.ConcernId,
				ShopAccess = eShop.ShopAccess,
				OrganizationNumber = eShop.OrganizationNumber,
				Latitude = eShop.Latitude,
				Longitude = eShop.Longitude,
				ExternalAccessUsername = eShop.ExternalAccessUsername,
				ExternalAccessHashedPassword = eShop.ExternalAccessHashedPassword,
				ShopGroupId = eShop.ShopGroupId,
			};
			
			return shop;
		}
		
		/// <summary>
		/// Converts from Shop to EShop.
		/// </summary>
		/// <param name="shop">The Shop.</param>
		/// <returns>The converted EShop.</returns>

		public static EShop Convert (Shop shop)
		{		
			return new EShop
			{
				Id = shop.Id,
				CategoryId = shop.CategoryId,
				ShopName = shop.ShopName,
				ShopNumber = shop.ShopNumber,
				ShopDescription = shop.ShopDescription,
				ContactFirstName = shop.ContactFirstName,
				ContactLastName = shop.ContactLastName,
				Email = shop.Email,
				Phone = shop.Phone,
				Phone2 = shop.Phone2,
				Fax = shop.Fax,
				Url = shop.Url,
				MapUrl = shop.MapUrl,
				Address = shop.Address,
				Address2 = shop.Address2,
				Zip = shop.Zip,
				City = shop.City,
				Active = shop.Active,
				GiroId = shop.GiroId,
				GiroNumber = shop.GiroNumber,
				GiroSupplier = shop.GiroSupplier,
				ConcernId = shop.ConcernId,
				ShopAccess = shop.ShopAccess,
				OrganizationNumber = shop.OrganizationNumber,
				Latitude = shop.Latitude,
				Longitude = shop.Longitude,
				ExternalAccessUsername = shop.ExternalAccessUsername,
				ExternalAccessHashedPassword = shop.ExternalAccessHashedPassword,
				ShopGroupId = shop.ShopGroupId,
			};
		}

		#endregion
	}
}
#pragma warning restore 1591
