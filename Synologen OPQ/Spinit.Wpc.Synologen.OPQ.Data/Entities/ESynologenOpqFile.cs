#pragma warning disable 1591

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Spinit's LINQ to SQL template for T4 C#
//     Generated at 10/26/2009 13:57:22
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq.Expressions;

using Spinit.Data.Linq;

using Spinit.Wpc.Synologen.OPQ.Core.Entities;

namespace Spinit.Wpc.Synologen.OPQ.Data.Entities
{	
	[Table(Name=@"dbo.SynologenOpqFiles")]
	public partial class ESynologenOpqFile : EntityBase
	{
		#region Spinit search extension
		
		/// <summary>
		/// Creates a lambda-expression for use with the data-load-option feature,
		/// </summary>
		/// <param name="property">The property to search-for.</param>
		/// <returns>A lambda-expression.</returns>

		public override LambdaExpression BuildSearchExpression (string property)
		{
			ParameterExpression parameter = Expression.Parameter (GetType (), "eSynologenOpqFile");
			return Expression.Lambda<Func<ESynologenOpqFile, object>> (
						Expression.Property (parameter, property),
						parameter);
		}
		
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public ESynologenOpqFile()
		{
			_SynologenOpqFileCategory = default(EntityRef<ESynologenOpqFileCategory>); 
			_SynologenOpqNode = default(EntityRef<ESynologenOpqNode>); 
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnIdChanging(int value);
		partial void OnIdChanged();
		private int _Id;
		[Column(Storage=@"_Id", AutoSync=AutoSync.OnInsert, DbType=@"Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get { return _Id; }
			set {
				if (_Id != value) {
					OnIdChanging(value);
					SendPropertyChanging();
					_Id = value;
					SendPropertyChanged("Id");
					OnIdChanged();
				}
			}
		}
		
		partial void OnOrderChanging(int value);
		partial void OnOrderChanged();
		private int _Order;
		[Column(Storage=@"_Order", Name=@"[Order]", DbType=@"Int NOT NULL", CanBeNull=false)]
		public int Order
		{
			get { return _Order; }
			set {
				if (_Order != value) {
					OnOrderChanging(value);
					SendPropertyChanging();
					_Order = value;
					SendPropertyChanged("Order");
					OnOrderChanged();
				}
			}
		}
		
		partial void OnFleCatIdChanging(int value);
		partial void OnFleCatIdChanged();
		private int _FleCatId;
		[Column(Storage=@"_FleCatId", DbType=@"Int NOT NULL", CanBeNull=false)]
		public int FleCatId
		{
			get { return _FleCatId; }
			set {
				if (_FleCatId != value) {
					if (_SynologenOpqFileCategory.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnFleCatIdChanging(value);
					SendPropertyChanging();
					_FleCatId = value;
					SendPropertyChanged("FleCatId");
					OnFleCatIdChanged();
				}
			}
		}
		
		partial void OnFleIdChanging(int value);
		partial void OnFleIdChanged();
		private int _FleId;
		[Column(Storage=@"_FleId", DbType=@"Int NOT NULL", CanBeNull=false)]
		public int FleId
		{
			get { return _FleId; }
			set {
				if (_FleId != value) {
					OnFleIdChanging(value);
					SendPropertyChanging();
					_FleId = value;
					SendPropertyChanged("FleId");
					OnFleIdChanged();
				}
			}
		}
		
		partial void OnNdeIdChanging(int value);
		partial void OnNdeIdChanged();
		private int _NdeId;
		[Column(Storage=@"_NdeId", DbType=@"Int NOT NULL", CanBeNull=false)]
		public int NdeId
		{
			get { return _NdeId; }
			set {
				if (_NdeId != value) {
					if (_SynologenOpqNode.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnNdeIdChanging(value);
					SendPropertyChanging();
					_NdeId = value;
					SendPropertyChanged("NdeId");
					OnNdeIdChanged();
				}
			}
		}
		
		partial void OnShpIdChanging(int? value);
		partial void OnShpIdChanged();
		private int? _ShpId;
		[Column(Storage=@"_ShpId", DbType=@"Int")]
		public int? ShpId
		{
			get { return _ShpId; }
			set {
				if (_ShpId != value) {
					OnShpIdChanging(value);
					SendPropertyChanging();
					_ShpId = value;
					SendPropertyChanged("ShpId");
					OnShpIdChanged();
				}
			}
		}
		
		partial void OnCncIdChanging(int? value);
		partial void OnCncIdChanged();
		private int? _CncId;
		[Column(Storage=@"_CncId", DbType=@"Int")]
		public int? CncId
		{
			get { return _CncId; }
			set {
				if (_CncId != value) {
					OnCncIdChanging(value);
					SendPropertyChanging();
					_CncId = value;
					SendPropertyChanged("CncId");
					OnCncIdChanged();
				}
			}
		}
		
		partial void OnIsActiveChanging(bool value);
		partial void OnIsActiveChanged();
		private bool _IsActive;
		[Column(Storage=@"_IsActive", DbType=@"Bit NOT NULL", CanBeNull=false)]
		public bool IsActive
		{
			get { return _IsActive; }
			set {
				if (_IsActive != value) {
					OnIsActiveChanging(value);
					SendPropertyChanging();
					_IsActive = value;
					SendPropertyChanged("IsActive");
					OnIsActiveChanged();
				}
			}
		}
		
		partial void OnCreatedByIdChanging(int value);
		partial void OnCreatedByIdChanged();
		private int _CreatedById;
		[Column(Storage=@"_CreatedById", DbType=@"Int NOT NULL", CanBeNull=false)]
		public int CreatedById
		{
			get { return _CreatedById; }
			set {
				if (_CreatedById != value) {
					OnCreatedByIdChanging(value);
					SendPropertyChanging();
					_CreatedById = value;
					SendPropertyChanged("CreatedById");
					OnCreatedByIdChanged();
				}
			}
		}
		
		partial void OnCreatedByNameChanging(string value);
		partial void OnCreatedByNameChanged();
		private string _CreatedByName;
		[Column(Storage=@"_CreatedByName", DbType=@"NVarChar(100) NOT NULL", CanBeNull=false)]
		public string CreatedByName
		{
			get { return _CreatedByName; }
			set {
				if (_CreatedByName != value) {
					OnCreatedByNameChanging(value);
					SendPropertyChanging();
					_CreatedByName = value;
					SendPropertyChanged("CreatedByName");
					OnCreatedByNameChanged();
				}
			}
		}
		
		partial void OnCreatedDateChanging(DateTime value);
		partial void OnCreatedDateChanged();
		private DateTime _CreatedDate;
		[Column(Storage=@"_CreatedDate", DbType=@"DateTime NOT NULL", CanBeNull=false)]
		public DateTime CreatedDate
		{
			get { return _CreatedDate; }
			set {
				if (_CreatedDate != value) {
					OnCreatedDateChanging(value);
					SendPropertyChanging();
					_CreatedDate = value;
					SendPropertyChanged("CreatedDate");
					OnCreatedDateChanged();
				}
			}
		}
		
		partial void OnChangedByIdChanging(int? value);
		partial void OnChangedByIdChanged();
		private int? _ChangedById;
		[Column(Storage=@"_ChangedById", DbType=@"Int")]
		public int? ChangedById
		{
			get { return _ChangedById; }
			set {
				if (_ChangedById != value) {
					OnChangedByIdChanging(value);
					SendPropertyChanging();
					_ChangedById = value;
					SendPropertyChanged("ChangedById");
					OnChangedByIdChanged();
				}
			}
		}
		
		partial void OnChangedByNameChanging(string value);
		partial void OnChangedByNameChanged();
		private string _ChangedByName;
		[Column(Storage=@"_ChangedByName", DbType=@"NVarChar(100)")]
		public string ChangedByName
		{
			get { return _ChangedByName; }
			set {
				if (_ChangedByName != value) {
					OnChangedByNameChanging(value);
					SendPropertyChanging();
					_ChangedByName = value;
					SendPropertyChanged("ChangedByName");
					OnChangedByNameChanged();
				}
			}
		}
		
		partial void OnChangedDateChanging(DateTime? value);
		partial void OnChangedDateChanged();
		private DateTime? _ChangedDate;
		[Column(Storage=@"_ChangedDate", DbType=@"DateTime")]
		public DateTime? ChangedDate
		{
			get { return _ChangedDate; }
			set {
				if (_ChangedDate != value) {
					OnChangedDateChanging(value);
					SendPropertyChanging();
					_ChangedDate = value;
					SendPropertyChanged("ChangedDate");
					OnChangedDateChanged();
				}
			}
		}
		
		partial void OnApprovedByIdChanging(int? value);
		partial void OnApprovedByIdChanged();
		private int? _ApprovedById;
		[Column(Storage=@"_ApprovedById", DbType=@"Int")]
		public int? ApprovedById
		{
			get { return _ApprovedById; }
			set {
				if (_ApprovedById != value) {
					OnApprovedByIdChanging(value);
					SendPropertyChanging();
					_ApprovedById = value;
					SendPropertyChanged("ApprovedById");
					OnApprovedByIdChanged();
				}
			}
		}
		
		partial void OnApprovedByNameChanging(string value);
		partial void OnApprovedByNameChanged();
		private string _ApprovedByName;
		[Column(Storage=@"_ApprovedByName", DbType=@"NVarChar(100)")]
		public string ApprovedByName
		{
			get { return _ApprovedByName; }
			set {
				if (_ApprovedByName != value) {
					OnApprovedByNameChanging(value);
					SendPropertyChanging();
					_ApprovedByName = value;
					SendPropertyChanged("ApprovedByName");
					OnApprovedByNameChanged();
				}
			}
		}
		
		partial void OnApprovedDateChanging(DateTime? value);
		partial void OnApprovedDateChanged();
		private DateTime? _ApprovedDate;
		[Column(Storage=@"_ApprovedDate", DbType=@"DateTime")]
		public DateTime? ApprovedDate
		{
			get { return _ApprovedDate; }
			set {
				if (_ApprovedDate != value) {
					OnApprovedDateChanging(value);
					SendPropertyChanging();
					_ApprovedDate = value;
					SendPropertyChanged("ApprovedDate");
					OnApprovedDateChanged();
				}
			}
		}
		
		partial void OnLockedByIdChanging(int? value);
		partial void OnLockedByIdChanged();
		private int? _LockedById;
		[Column(Storage=@"_LockedById", DbType=@"Int")]
		public int? LockedById
		{
			get { return _LockedById; }
			set {
				if (_LockedById != value) {
					OnLockedByIdChanging(value);
					SendPropertyChanging();
					_LockedById = value;
					SendPropertyChanged("LockedById");
					OnLockedByIdChanged();
				}
			}
		}
		
		partial void OnLockedByNameChanging(string value);
		partial void OnLockedByNameChanged();
		private string _LockedByName;
		[Column(Storage=@"_LockedByName", DbType=@"NVarChar(100)")]
		public string LockedByName
		{
			get { return _LockedByName; }
			set {
				if (_LockedByName != value) {
					OnLockedByNameChanging(value);
					SendPropertyChanging();
					_LockedByName = value;
					SendPropertyChanged("LockedByName");
					OnLockedByNameChanged();
				}
			}
		}
		
		partial void OnLockedDateChanging(DateTime? value);
		partial void OnLockedDateChanged();
		private DateTime? _LockedDate;
		[Column(Storage=@"_LockedDate", DbType=@"DateTime")]
		public DateTime? LockedDate
		{
			get { return _LockedDate; }
			set {
				if (_LockedDate != value) {
					OnLockedDateChanging(value);
					SendPropertyChanging();
					_LockedDate = value;
					SendPropertyChanged("LockedDate");
					OnLockedDateChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntityRef<ESynologenOpqFileCategory> _SynologenOpqFileCategory;
		[Association(Name=@"SynologenOpqFileCategory_SynologenOpqFile", Storage=@"_SynologenOpqFileCategory", ThisKey=@"FleCatId", OtherKey=@"Id", IsForeignKey=true)]
		public ESynologenOpqFileCategory SynologenOpqFileCategory
		{
			get {
				return _SynologenOpqFileCategory.Entity;
			}
			set {
				ESynologenOpqFileCategory previousValue = _SynologenOpqFileCategory.Entity;
				if ((previousValue != value) || (!_SynologenOpqFileCategory.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_SynologenOpqFileCategory.Entity = null;
						previousValue.SynologenOpqFiles.Remove(this);
					}
					_SynologenOpqFileCategory.Entity = value;
					if (value != null) {
						value.SynologenOpqFiles.Add(this);
						_FleCatId = value.Id;
					}
					else {
						_FleCatId = default(int);
					}
					SendPropertyChanged("SynologenOpqFileCategory");
				}
			}
		}

		private EntityRef<ESynologenOpqNode> _SynologenOpqNode;
		[Association(Name=@"SynologenOpqNode_SynologenOpqFile", Storage=@"_SynologenOpqNode", ThisKey=@"NdeId", OtherKey=@"Id", IsForeignKey=true)]
		public ESynologenOpqNode SynologenOpqNode
		{
			get {
				return _SynologenOpqNode.Entity;
			}
			set {
				ESynologenOpqNode previousValue = _SynologenOpqNode.Entity;
				if ((previousValue != value) || (!_SynologenOpqNode.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_SynologenOpqNode.Entity = null;
						previousValue.SynologenOpqFiles.Remove(this);
					}
					_SynologenOpqNode.Entity = value;
					if (value != null) {
						value.SynologenOpqFiles.Add(this);
						_NdeId = value.Id;
					}
					else {
						_NdeId = default(int);
					}
					SendPropertyChanged("SynologenOpqNode");
				}
			}
		}

		#endregion

		#region Converters
		
		/// <summary>
		/// Converts from ESynologenOpqFile to SynologenOpqFile.
		/// </summary>
		/// <param name="eSynologenOpqFile">The ESynologenOpqFile.</param>
		/// <returns>The converted SynologenOpqFile.</returns>

		public SynologenOpqFile ToEntity (ESynologenOpqFile eSynologenOpqFile)
		{
			SynologenOpqFile synologenOpqFile = new SynologenOpqFile
			{
				Id = eSynologenOpqFile.Id,
				Order = eSynologenOpqFile.Order,
				FleCatId = eSynologenOpqFile.FleCatId,
				FleId = eSynologenOpqFile.FleId,
				NdeId = eSynologenOpqFile.NdeId,
				ShpId = eSynologenOpqFile.ShpId,
				CncId = eSynologenOpqFile.CncId,
				IsActive = eSynologenOpqFile.IsActive,
				CreatedById = eSynologenOpqFile.CreatedById,
				CreatedByName = eSynologenOpqFile.CreatedByName,
				CreatedDate = eSynologenOpqFile.CreatedDate,
				ChangedById = eSynologenOpqFile.ChangedById,
				ChangedByName = eSynologenOpqFile.ChangedByName,
				ChangedDate = eSynologenOpqFile.ChangedDate,
				ApprovedById = eSynologenOpqFile.ApprovedById,
				ApprovedByName = eSynologenOpqFile.ApprovedByName,
				ApprovedDate = eSynologenOpqFile.ApprovedDate,
				LockedById = eSynologenOpqFile.LockedById,
				LockedByName = eSynologenOpqFile.LockedByName,
				LockedDate = eSynologenOpqFile.LockedDate,
			};
			
			return synologenOpqFile;
		}
		
		/// <summary>
		/// Converts from SynologenOpqFile to ESynologenOpqFile.
		/// </summary>
		/// <param name="synologenOpqFile">The SynologenOpqFile.</param>
		/// <returns>The converted ESynologenOpqFile.</returns>

		public ESynologenOpqFile ToEntity (SynologenOpqFile synologenOpqFile)
		{		
			return new ESynologenOpqFile
			{
				Id = synologenOpqFile.Id,
				Order = synologenOpqFile.Order,
				FleCatId = synologenOpqFile.FleCatId,
				FleId = synologenOpqFile.FleId,
				NdeId = synologenOpqFile.NdeId,
				ShpId = synologenOpqFile.ShpId,
				CncId = synologenOpqFile.CncId,
				IsActive = synologenOpqFile.IsActive,
				CreatedById = synologenOpqFile.CreatedById,
				CreatedByName = synologenOpqFile.CreatedByName,
				CreatedDate = synologenOpqFile.CreatedDate,
				ChangedById = synologenOpqFile.ChangedById,
				ChangedByName = synologenOpqFile.ChangedByName,
				ChangedDate = synologenOpqFile.ChangedDate,
				ApprovedById = synologenOpqFile.ApprovedById,
				ApprovedByName = synologenOpqFile.ApprovedByName,
				ApprovedDate = synologenOpqFile.ApprovedDate,
				LockedById = synologenOpqFile.LockedById,
				LockedByName = synologenOpqFile.LockedByName,
				LockedDate = synologenOpqFile.LockedDate,
			};
		}

		#endregion
	}
}
#pragma warning restore 1591
