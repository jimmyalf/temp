#pragma warning disable 1591

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Spinit's LINQ to SQL template for T4 C#
//     Generated at 10/26/2009 13:57:22
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq.Expressions;

using Spinit.Data.Linq;

using Spinit.Wpc.Synologen.OPQ.Core.Entities;

namespace Spinit.Wpc.Synologen.OPQ.Data.Entities
{	
	[Table(Name=@"dbo.SynologenOpqNodes")]
	public partial class ESynologenOpqNode : EntityBase
	{
		#region Spinit search extension
		
		/// <summary>
		/// Creates a lambda-expression for use with the data-load-option feature,
		/// </summary>
		/// <param name="property">The property to search-for.</param>
		/// <returns>A lambda-expression.</returns>

		public override LambdaExpression BuildSearchExpression (string property)
		{
			ParameterExpression parameter = Expression.Parameter (GetType (), "eSynologenOpqNode");
			return Expression.Lambda<Func<ESynologenOpqNode, object>> (
						Expression.Property (parameter, property),
						parameter);
		}
		
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public ESynologenOpqNode()
		{
			_SynologenOpqNodeSupplierConnections = new EntitySet<ESynologenOpqNodeSupplierConnection>(attach_SynologenOpqNodeSupplierConnections, detach_SynologenOpqNodeSupplierConnections);
			_SynologenOpqDocuments = new EntitySet<ESynologenOpqDocument>(attach_SynologenOpqDocuments, detach_SynologenOpqDocuments);
			_SynologenOpqFiles = new EntitySet<ESynologenOpqFile>(attach_SynologenOpqFiles, detach_SynologenOpqFiles);
			_SynologenOpqNodes = new EntitySet<ESynologenOpqNode>(attach_SynologenOpqNodes, detach_SynologenOpqNodes);
			_SynologenOpqNode1 = default(EntityRef<ESynologenOpqNode>); 
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnIdChanging(int value);
		partial void OnIdChanged();
		private int _Id;
		[Column(Storage=@"_Id", AutoSync=AutoSync.OnInsert, DbType=@"Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get { return _Id; }
			set {
				if (_Id != value) {
					OnIdChanging(value);
					SendPropertyChanging();
					_Id = value;
					SendPropertyChanged("Id");
					OnIdChanged();
				}
			}
		}
		
		partial void OnParentChanging(int? value);
		partial void OnParentChanged();
		private int? _Parent;
		[Column(Storage=@"_Parent", DbType=@"Int")]
		public int? Parent
		{
			get { return _Parent; }
			set {
				if (_Parent != value) {
					if (_SynologenOpqNode1.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnParentChanging(value);
					SendPropertyChanging();
					_Parent = value;
					SendPropertyChanged("Parent");
					OnParentChanged();
				}
			}
		}
		
		partial void OnOrderChanging(int value);
		partial void OnOrderChanged();
		private int _Order;
		[Column(Storage=@"_Order", Name=@"[Order]", DbType=@"Int NOT NULL", CanBeNull=false)]
		public int Order
		{
			get { return _Order; }
			set {
				if (_Order != value) {
					OnOrderChanging(value);
					SendPropertyChanging();
					_Order = value;
					SendPropertyChanged("Order");
					OnOrderChanged();
				}
			}
		}
		
		partial void OnNameChanging(string value);
		partial void OnNameChanged();
		private string _Name;
		[Column(Storage=@"_Name", DbType=@"NVarChar(512) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get { return _Name; }
			set {
				if (_Name != value) {
					OnNameChanging(value);
					SendPropertyChanging();
					_Name = value;
					SendPropertyChanged("Name");
					OnNameChanged();
				}
			}
		}
		
		partial void OnIsActiveChanging(bool value);
		partial void OnIsActiveChanged();
		private bool _IsActive;
		[Column(Storage=@"_IsActive", DbType=@"Bit NOT NULL", CanBeNull=false)]
		public bool IsActive
		{
			get { return _IsActive; }
			set {
				if (_IsActive != value) {
					OnIsActiveChanging(value);
					SendPropertyChanging();
					_IsActive = value;
					SendPropertyChanged("IsActive");
					OnIsActiveChanged();
				}
			}
		}
		
		partial void OnCreatedByIdChanging(int value);
		partial void OnCreatedByIdChanged();
		private int _CreatedById;
		[Column(Storage=@"_CreatedById", DbType=@"Int NOT NULL", CanBeNull=false)]
		public int CreatedById
		{
			get { return _CreatedById; }
			set {
				if (_CreatedById != value) {
					OnCreatedByIdChanging(value);
					SendPropertyChanging();
					_CreatedById = value;
					SendPropertyChanged("CreatedById");
					OnCreatedByIdChanged();
				}
			}
		}
		
		partial void OnCreatedByNameChanging(string value);
		partial void OnCreatedByNameChanged();
		private string _CreatedByName;
		[Column(Storage=@"_CreatedByName", DbType=@"NVarChar(100) NOT NULL", CanBeNull=false)]
		public string CreatedByName
		{
			get { return _CreatedByName; }
			set {
				if (_CreatedByName != value) {
					OnCreatedByNameChanging(value);
					SendPropertyChanging();
					_CreatedByName = value;
					SendPropertyChanged("CreatedByName");
					OnCreatedByNameChanged();
				}
			}
		}
		
		partial void OnCreatedDateChanging(DateTime value);
		partial void OnCreatedDateChanged();
		private DateTime _CreatedDate;
		[Column(Storage=@"_CreatedDate", DbType=@"DateTime NOT NULL", CanBeNull=false)]
		public DateTime CreatedDate
		{
			get { return _CreatedDate; }
			set {
				if (_CreatedDate != value) {
					OnCreatedDateChanging(value);
					SendPropertyChanging();
					_CreatedDate = value;
					SendPropertyChanged("CreatedDate");
					OnCreatedDateChanged();
				}
			}
		}
		
		partial void OnChangedByIdChanging(int? value);
		partial void OnChangedByIdChanged();
		private int? _ChangedById;
		[Column(Storage=@"_ChangedById", DbType=@"Int")]
		public int? ChangedById
		{
			get { return _ChangedById; }
			set {
				if (_ChangedById != value) {
					OnChangedByIdChanging(value);
					SendPropertyChanging();
					_ChangedById = value;
					SendPropertyChanged("ChangedById");
					OnChangedByIdChanged();
				}
			}
		}
		
		partial void OnChangedByNameChanging(string value);
		partial void OnChangedByNameChanged();
		private string _ChangedByName;
		[Column(Storage=@"_ChangedByName", DbType=@"NVarChar(100)")]
		public string ChangedByName
		{
			get { return _ChangedByName; }
			set {
				if (_ChangedByName != value) {
					OnChangedByNameChanging(value);
					SendPropertyChanging();
					_ChangedByName = value;
					SendPropertyChanged("ChangedByName");
					OnChangedByNameChanged();
				}
			}
		}
		
		partial void OnChangedDateChanging(DateTime? value);
		partial void OnChangedDateChanged();
		private DateTime? _ChangedDate;
		[Column(Storage=@"_ChangedDate", DbType=@"DateTime")]
		public DateTime? ChangedDate
		{
			get { return _ChangedDate; }
			set {
				if (_ChangedDate != value) {
					OnChangedDateChanging(value);
					SendPropertyChanging();
					_ChangedDate = value;
					SendPropertyChanged("ChangedDate");
					OnChangedDateChanged();
				}
			}
		}
		
		partial void OnApprovedByIdChanging(int? value);
		partial void OnApprovedByIdChanged();
		private int? _ApprovedById;
		[Column(Storage=@"_ApprovedById", DbType=@"Int")]
		public int? ApprovedById
		{
			get { return _ApprovedById; }
			set {
				if (_ApprovedById != value) {
					OnApprovedByIdChanging(value);
					SendPropertyChanging();
					_ApprovedById = value;
					SendPropertyChanged("ApprovedById");
					OnApprovedByIdChanged();
				}
			}
		}
		
		partial void OnApprovedByNameChanging(string value);
		partial void OnApprovedByNameChanged();
		private string _ApprovedByName;
		[Column(Storage=@"_ApprovedByName", DbType=@"NVarChar(100)")]
		public string ApprovedByName
		{
			get { return _ApprovedByName; }
			set {
				if (_ApprovedByName != value) {
					OnApprovedByNameChanging(value);
					SendPropertyChanging();
					_ApprovedByName = value;
					SendPropertyChanged("ApprovedByName");
					OnApprovedByNameChanged();
				}
			}
		}
		
		partial void OnApprovedDateChanging(DateTime? value);
		partial void OnApprovedDateChanged();
		private DateTime? _ApprovedDate;
		[Column(Storage=@"_ApprovedDate", DbType=@"DateTime")]
		public DateTime? ApprovedDate
		{
			get { return _ApprovedDate; }
			set {
				if (_ApprovedDate != value) {
					OnApprovedDateChanging(value);
					SendPropertyChanging();
					_ApprovedDate = value;
					SendPropertyChanged("ApprovedDate");
					OnApprovedDateChanged();
				}
			}
		}
		
		partial void OnLockedByIdChanging(int? value);
		partial void OnLockedByIdChanged();
		private int? _LockedById;
		[Column(Storage=@"_LockedById", DbType=@"Int")]
		public int? LockedById
		{
			get { return _LockedById; }
			set {
				if (_LockedById != value) {
					OnLockedByIdChanging(value);
					SendPropertyChanging();
					_LockedById = value;
					SendPropertyChanged("LockedById");
					OnLockedByIdChanged();
				}
			}
		}
		
		partial void OnLockedByNameChanging(string value);
		partial void OnLockedByNameChanged();
		private string _LockedByName;
		[Column(Storage=@"_LockedByName", DbType=@"NVarChar(100)")]
		public string LockedByName
		{
			get { return _LockedByName; }
			set {
				if (_LockedByName != value) {
					OnLockedByNameChanging(value);
					SendPropertyChanging();
					_LockedByName = value;
					SendPropertyChanged("LockedByName");
					OnLockedByNameChanged();
				}
			}
		}
		
		partial void OnLockedDateChanging(DateTime? value);
		partial void OnLockedDateChanged();
		private DateTime? _LockedDate;
		[Column(Storage=@"_LockedDate", DbType=@"DateTime")]
		public DateTime? LockedDate
		{
			get { return _LockedDate; }
			set {
				if (_LockedDate != value) {
					OnLockedDateChanging(value);
					SendPropertyChanging();
					_LockedDate = value;
					SendPropertyChanged("LockedDate");
					OnLockedDateChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntitySet<ESynologenOpqNodeSupplierConnection> _SynologenOpqNodeSupplierConnections;
		[Association(Name=@"SynologenOpqNode_SynologenOpqNodeSupplierConnection", Storage=@"_SynologenOpqNodeSupplierConnections", ThisKey=@"Id", OtherKey=@"NdeId")]
		public EntitySet<ESynologenOpqNodeSupplierConnection> SynologenOpqNodeSupplierConnections
		{
			get {
				return _SynologenOpqNodeSupplierConnections;
			}
			set {
				_SynologenOpqNodeSupplierConnections.Assign(value);
			}
		}

		private void attach_SynologenOpqNodeSupplierConnections(ESynologenOpqNodeSupplierConnection entity)
		{
			SendPropertyChanging();
			entity.SynologenOpqNode = this;
		}
		
		private void detach_SynologenOpqNodeSupplierConnections(ESynologenOpqNodeSupplierConnection entity)
		{
			SendPropertyChanging();
			entity.SynologenOpqNode = null;
		}
		private EntitySet<ESynologenOpqDocument> _SynologenOpqDocuments;
		[Association(Name=@"SynologenOpqNode_SynologenOpqDocument", Storage=@"_SynologenOpqDocuments", ThisKey=@"Id", OtherKey=@"NdeId")]
		public EntitySet<ESynologenOpqDocument> SynologenOpqDocuments
		{
			get {
				return _SynologenOpqDocuments;
			}
			set {
				_SynologenOpqDocuments.Assign(value);
			}
		}

		private void attach_SynologenOpqDocuments(ESynologenOpqDocument entity)
		{
			SendPropertyChanging();
			entity.SynologenOpqNode = this;
		}
		
		private void detach_SynologenOpqDocuments(ESynologenOpqDocument entity)
		{
			SendPropertyChanging();
			entity.SynologenOpqNode = null;
		}
		private EntitySet<ESynologenOpqFile> _SynologenOpqFiles;
		[Association(Name=@"SynologenOpqNode_SynologenOpqFile", Storage=@"_SynologenOpqFiles", ThisKey=@"Id", OtherKey=@"NdeId")]
		public EntitySet<ESynologenOpqFile> SynologenOpqFiles
		{
			get {
				return _SynologenOpqFiles;
			}
			set {
				_SynologenOpqFiles.Assign(value);
			}
		}

		private void attach_SynologenOpqFiles(ESynologenOpqFile entity)
		{
			SendPropertyChanging();
			entity.SynologenOpqNode = this;
		}
		
		private void detach_SynologenOpqFiles(ESynologenOpqFile entity)
		{
			SendPropertyChanging();
			entity.SynologenOpqNode = null;
		}
		private EntitySet<ESynologenOpqNode> _SynologenOpqNodes;
		[Association(Name=@"SynologenOpqNode_SynologenOpqNode", Storage=@"_SynologenOpqNodes", ThisKey=@"Id", OtherKey=@"Parent")]
		public EntitySet<ESynologenOpqNode> SynologenOpqNodes
		{
			get {
				return _SynologenOpqNodes;
			}
			set {
				_SynologenOpqNodes.Assign(value);
			}
		}

		private void attach_SynologenOpqNodes(ESynologenOpqNode entity)
		{
			SendPropertyChanging();
			entity.SynologenOpqNode1 = this;
		}
		
		private void detach_SynologenOpqNodes(ESynologenOpqNode entity)
		{
			SendPropertyChanging();
			entity.SynologenOpqNode1 = null;
		}
		private EntityRef<ESynologenOpqNode> _SynologenOpqNode1;
		[Association(Name=@"SynologenOpqNode_SynologenOpqNode", Storage=@"_SynologenOpqNode1", ThisKey=@"Parent", OtherKey=@"Id", IsForeignKey=true)]
		public ESynologenOpqNode SynologenOpqNode1
		{
			get {
				return _SynologenOpqNode1.Entity;
			}
			set {
				ESynologenOpqNode previousValue = _SynologenOpqNode1.Entity;
				if ((previousValue != value) || (!_SynologenOpqNode1.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_SynologenOpqNode1.Entity = null;
						previousValue.SynologenOpqNodes.Remove(this);
					}
					_SynologenOpqNode1.Entity = value;
					if (value != null) {
						value.SynologenOpqNodes.Add(this);
						_Parent = value.Id;
					}
					else {
						_Parent = default(int?);
					}
					SendPropertyChanged("SynologenOpqNode1");
				}
			}
		}

		#endregion

		#region Converters
		
		/// <summary>
		/// Converts from ESynologenOpqNode to SynologenOpqNode.
		/// </summary>
		/// <param name="eSynologenOpqNode">The ESynologenOpqNode.</param>
		/// <returns>The converted SynologenOpqNode.</returns>

		public SynologenOpqNode ToEntity (ESynologenOpqNode eSynologenOpqNode)
		{
			SynologenOpqNode synologenOpqNode = new SynologenOpqNode
			{
				Id = eSynologenOpqNode.Id,
				Parent = eSynologenOpqNode.Parent,
				Order = eSynologenOpqNode.Order,
				Name = eSynologenOpqNode.Name,
				IsActive = eSynologenOpqNode.IsActive,
				CreatedById = eSynologenOpqNode.CreatedById,
				CreatedByName = eSynologenOpqNode.CreatedByName,
				CreatedDate = eSynologenOpqNode.CreatedDate,
				ChangedById = eSynologenOpqNode.ChangedById,
				ChangedByName = eSynologenOpqNode.ChangedByName,
				ChangedDate = eSynologenOpqNode.ChangedDate,
				ApprovedById = eSynologenOpqNode.ApprovedById,
				ApprovedByName = eSynologenOpqNode.ApprovedByName,
				ApprovedDate = eSynologenOpqNode.ApprovedDate,
				LockedById = eSynologenOpqNode.LockedById,
				LockedByName = eSynologenOpqNode.LockedByName,
				LockedDate = eSynologenOpqNode.LockedDate,
			};
			
			return synologenOpqNode;
		}
		
		/// <summary>
		/// Converts from SynologenOpqNode to ESynologenOpqNode.
		/// </summary>
		/// <param name="synologenOpqNode">The SynologenOpqNode.</param>
		/// <returns>The converted ESynologenOpqNode.</returns>

		public ESynologenOpqNode ToEntity (SynologenOpqNode synologenOpqNode)
		{		
			return new ESynologenOpqNode
			{
				Id = synologenOpqNode.Id,
				Parent = synologenOpqNode.Parent,
				Order = synologenOpqNode.Order,
				Name = synologenOpqNode.Name,
				IsActive = synologenOpqNode.IsActive,
				CreatedById = synologenOpqNode.CreatedById,
				CreatedByName = synologenOpqNode.CreatedByName,
				CreatedDate = synologenOpqNode.CreatedDate,
				ChangedById = synologenOpqNode.ChangedById,
				ChangedByName = synologenOpqNode.ChangedByName,
				ChangedDate = synologenOpqNode.ChangedDate,
				ApprovedById = synologenOpqNode.ApprovedById,
				ApprovedByName = synologenOpqNode.ApprovedByName,
				ApprovedDate = synologenOpqNode.ApprovedDate,
				LockedById = synologenOpqNode.LockedById,
				LockedByName = synologenOpqNode.LockedByName,
				LockedDate = synologenOpqNode.LockedDate,
			};
		}

		#endregion
	}
}
#pragma warning restore 1591
