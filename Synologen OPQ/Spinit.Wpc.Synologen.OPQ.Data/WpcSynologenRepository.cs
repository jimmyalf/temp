
#pragma warning disable 1591

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Spinit's LINQ to SQL template for T4 C#
//     Generated at 11/03/2009 15:07:31
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;

using Spinit.Data.Linq;
using Spinit.Logging;

using Spinit.Wpc.Synologen.OPQ.Core;
using Spinit.Wpc.Synologen.OPQ.Core.Entities;
using Spinit.Wpc.Synologen.OPQ.Data.Entities;

namespace Spinit.Wpc.Synologen.OPQ.Data
{
	public partial class WpcSynologenRepository : SpinitRepository
	{
		#region Constructors

		/// <summary>
		/// Constructor whics sets configuration and logging.
		/// </summary>
		/// <param name="configuration">The configuration.</param>
		/// <param name="loggingService">The logging-service.</param>

		public WpcSynologenRepository (
			Configuration configuration,
			ILoggingService loggingService) 
			: base (new WpcSynologenDataContext (configuration.ConnectionString))
		{
			OnCreate ();

			Configuration = configuration;
			
			LoggingService = loggingService;

			TrackingOn = false;
		}

		/// <summary>
		/// Constructor whics sets configuration, logging and tracking.
		/// </summary>
		/// <param name="configuration">The configuration.</param>
		/// <param name="loggingService">The logging-service.</param>
		/// <param name="noTracking">If true=>no tracking.</param>

		public WpcSynologenRepository (
			Configuration configuration,
			ILoggingService loggingService,
			bool noTracking)
			: base (new WpcSynologenDataContext (configuration.ConnectionString).NoTracking ())
		{
			OnCreate ();

			Configuration = configuration;

			LoggingService = loggingService;

			TrackingOn = noTracking;
		}

		/// <summary>
		/// Constructor whics sets configuration, logging and context.
		/// </summary>
		/// <param name="configuration">The configuration.</param>
		/// <param name="loggingService">The logging-service.</param>
		/// <param name="context">The context.</param>

		public WpcSynologenRepository (
			Configuration configuration,
			ILoggingService loggingService,
			SpinitDataContext context)
			: base (context)
		{
			OnCreate ();

			Configuration = configuration;

			LoggingService = loggingService;

			TrackingOn = false;
		}

		#endregion
		
 		
		#region Create Repository

		/// <summary>
		/// Creates the repository with tracking.
		/// </summary>
		/// <param name="configuration">The configuarion.</param>
		/// <param name="loggingService">The logging service.</param>
		/// <returns>A repository</returns>

		public static WpcSynologenRepository GetWpcSynologenRepository (
			Configuration configuration,
			ILoggingService loggingService)
		{
			return new WpcSynologenRepository (
				configuration,
				loggingService);
		}

		/// <summary>
		/// Creates the repository without tracking.
		/// </summary>
		/// <param name="configuration">The configuarion.</param>
		/// <param name="loggingService">The logging service.</param>
		/// <returns>A repository</returns>

		public static WpcSynologenRepository GetWpcSynologenRepositoryNoTracking (
			Configuration configuration,
			ILoggingService loggingService)
		{
			return new WpcSynologenRepository (
				configuration,
				loggingService,
				true);
		}

		#endregion
		
		#region Search

		/// <summary>
		/// Creates a search-table.
		/// </summary>

		protected override void CreateSearchTable ()
		{
			_searchTable = new List<SearchPairs>
			{
				new SearchPairs (typeof (DocumentHistory), new EDocumentHistory ()),
				new SearchPairs (typeof (NodeSupplierConnection), new ENodeSupplierConnection ()),
				new SearchPairs (typeof (Document), new EDocument ()),
				new SearchPairs (typeof (DocumentType), new EDocumentType ()),
				new SearchPairs (typeof (FileCategory), new EFileCategory ()),
				new SearchPairs (typeof (File), new EFile ()),
				new SearchPairs (typeof (Node), new ENode ()),
				new SearchPairs (typeof (BaseUser), new EBaseUser ()),
				new SearchPairs (typeof (BaseFile), new EBaseFile ()),
				new SearchPairs (typeof (Concern), new EConcern ()),
				new SearchPairs (typeof (ShopCategory), new EShopCategory ()),
				new SearchPairs (typeof (ShopCategoryMemberCategoryConnection), new EShopCategoryMemberCategoryConnection ()),
				new SearchPairs (typeof (ShopMemberConnection), new EShopMemberConnection ()),
				new SearchPairs (typeof (MemberCategory), new EMemberCategory ()),
				new SearchPairs (typeof (Member), new EMember ()),
				new SearchPairs (typeof (MemberUserConnection), new EMemberUserConnection ()),
				new SearchPairs (typeof (Shop), new EShop ()),
				new SearchPairs (typeof (DocumentView), new EDocumentView ()),
			};
		}

		#endregion
		
		#region Global properties

		/// <summary>
		/// Gets or sets the configuration
		/// </summary>

		public Configuration Configuration { get; set; }

		#endregion
	}
		
}
#pragma warning restore 1591
 
