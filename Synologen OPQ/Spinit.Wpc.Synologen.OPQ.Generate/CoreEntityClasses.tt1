<#@ template language="C#v3.5" hostspecific="True" #>
<#@ include file="Definitions.ttinclude"#>
<#
	manager.StartHeader();
#>
#pragma warning disable 1591

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Spinit's LINQ to SQL template for T4 C#
//     Generated at <#=DateTime.Now#>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;

<# 
	manager.EndHeader();
foreach(Table table in data.Tables) {
	foreach(TableClass class1 in table.Classes) {
		if (manager.IsInList (class1.Name, options.ExcludeTablesCore)) {
			continue;
		}
	
		manager.StartBlock(Path.ChangeExtension(class1.Name,".cs"));
		if (!String.IsNullOrEmpty(manager.OutputProjectCore)) {#>
namespace <#=manager.OutputProjectCore#>.<#=manager.OutputDirectoryCoreEntities#>
{	
<#		}#>
	public class <#=class1.Name#>
	{
		#region Column Mappings
		
<#			foreach(Column column in class1.Columns) {#>
		public <#=string.Equals (code.Format(column.Type), "Binary") ? "byte []" : code.Format(column.Type)#> <#=column.Member#> { get; set; }
		
<#			}#>
		#endregion
<#		
		if (class1.Associations.Count > 0) {
#>		
		#region Associations
		
<#			foreach(Association association in class1.Associations) {#>
		public <#=(association.IsMany) ? "List<" : ""#><#=association.Type.Name#><#=(association.IsMany) ? ">" : ""#> <#=association.Member#> { get; set; }
		
<#			} #>
		#endregion
		
		#region Overrides
		
		/// <summary>
		/// Returnes the string representation of this class.
		/// </summary>
		/// <returns>The string.</returns>

		public override string ToString ()
		{
			string str = string.Empty;
<#			foreach(Column column in class1.Columns) {#>
				 <# if (code.Format (column.Type).Equals ("string")) {#> 
			str += string.Concat (<#=column.Member#>, " ") ?? string.Empty;
<#					} #>
<#			} #>

			return str.Length > 1 ? str.Substring(0, str.Length - 1) : str;
		}		
		
		/// <summary>
		/// Overrides the equals base method.
		/// </summary>
		/// <param name="o">The compare object.</param>
		/// <returns>If match, true.</returns>

		public override bool Equals (object o)
		{
			if (!(o is <#=class1.Name#> )) {
				return false;
			}

			<#=class1.Name#> eq = o as <#=class1.Name#>;

<#			bool first = true;
			foreach(Column column in class1.Columns) {
				if (!column.IsPrimaryKey) {
					continue;
				}
				if (first) { #>
			return <#if (code.Format (column.Type).Equals ("string")) { #><#=column.Member#>.Equals (eq.<#=column.Member#>)<# } else { #><#=column.Member#> == eq.<#=column.Member#><# } #><#	first = false; } else { #> && <#if (code.Format (column.Type).Equals ("string")) { #> <#=column.Member#>.Equals (eq.<#=column.Member#>) <# } else { #><#=column.Member#> == eq.<#=column.Member#><# } } } #>;
		}

		/// <summary>
		/// Overrides the GetHashCode base method.
		/// </summary>
		/// <returns>The hash-code for this object.</returns>

		public override int GetHashCode ()
		{
<#			first = true;
			foreach(Column column in class1.Columns) {
				if (!column.IsPrimaryKey) {
					continue;
				}
				if (first) { #>
			return <#=column.Member#>.GetHashCode ()<#	first = false; } else { #> + <#=column.Member#>.GetHashCode ()<# } } #>;
		}

		#endregion
<#		}
#>	}
<#		if (!String.IsNullOrEmpty(data.EntityNamespace)) {#>
}
<#		}
		manager.EndBlock(true);
	}
}
	manager.StartFooter();
#>
#pragma warning restore 1591
<#
	manager.EndFooter(); 
	manager.Process(options.FilePerEntity);
#> 
