<#@ template language="C#v3.5" hostspecific="True" #>
<#@ include file="Definitions.ttinclude"#>
<#
	manager.StartHeader();
#>
#pragma warning disable 1591

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Spinit's LINQ to SQL template for T4 C#
//     Generated at <#=DateTime.Now#>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
<#if (data.Functions.Count > 0) {#>
using System.Reflection;
<#}
if (data.Serialization) {#>
using System.Runtime.Serialization;
<#}#>

using Spinit.Data.Linq;
using <#=manager.OutputProjectData#>.<#=manager.OutputDirectoryDataEntities#>;

<# manager.EndHeader();
if(!String.IsNullOrEmpty(data.ContextNamespace)){
#>
namespace <#=manager.OutputProjectData#>
{
<#}#>
	[DatabaseAttribute(Name=@"<#=data.DatabaseName#>")]
	<#=code.Format(data.TypeAttributes)#>partial class <#=dataContextClassName#> : <#=options.DataContextBaseClass#>
	{
		#region Construction
	
		public <#=dataContextClassName#> (string connection) :
			base(connection)
		{
			OnCreated();
		}
		
		public <#=dataContextClassName#> (IDbConnection connection) :
			base(connection)
		{
			OnCreated();
		}
		
		public <#=dataContextClassName#> (string connection, MappingSource mappingSource) :
			base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public <#=dataContextClassName#> (IDbConnection connection, MappingSource mappingSource) :
			base(connection, mappingSource)
		{
			OnCreated();
		}
		
		#endregion
		
		#region Extensibility Method Definitions
		
		partial void OnCreated();
<#	var tableOperations = new List<TableOperation>();
	foreach(var table in data.Tables)
		tableOperations.AddRange(table.Operations);
	foreach(Table table in data.Tables)
		foreach(OperationType operationType in Enum.GetValues(typeof(OperationType)))
			if (!tableOperations.Any(o => (o.Table == table) && (o.Type == operationType))) {#>
		partial void <#=operationType#><#=table.BaseClass.Name#>(E<#=manager.CleanPrefix (table.BaseClass.QualifiedName, options.RemovePrefixTable)#> instance);
<#}#>
		
		#endregion
<#if(data.Tables.Count > 0) {#>
		
		#region Tables

<#	foreach(Table table in data.Tables) {
#>		<#=code.GetAccess(table.BaseClass.TypeAttributes)#>Table<E<#=manager.CleanPrefix (table.BaseClass.QualifiedName, options.RemovePrefixTable)#>> <#=table.Member#>
		{
			get { return GetTable<E<#=manager.CleanPrefix (table.BaseClass.QualifiedName, options.RemovePrefixTable)#>>(); }
		}
		
<#	}

#>		#endregion
<#}
if (data.Functions.Count > 0) {#>
		
		#region Functions
		
<#	foreach(Function function in data.Functions) {
#>
		[Function(Name=@"<#=function.Name#>"<#
		if (function.IsComposable) {#>, IsComposable=true<#}
		#>)]
<#		if (function.Return != null && function.Return.DbType != null) {
#>		[return: Parameter(DbType=@"<#=function.Return.DbType#>")]
<#		}
		if (function.HasMultipleResults) {
			foreach(Class class1 in function.Classes) {#>
		[ResultType(typeof(<#=class1.QualifiedName#>))]
<#			}
		}#>
		<#=code.Format(function.MemberAttributes)#><#=code.Format(function.ReturnType)#> <#=function.Method#>(<#
		foreach(Parameter parameter in function.Parameters) {#>

					[Parameter(Name=@"<#=parameter.DbName#>", DbType=@"<#=parameter.DbType#>")] <#=code.Format(parameter.Direction)#><#=code.Format(parameter.Type)#> <#=parameter.Name#><#
			if (parameter != function.Parameters.Last()) {#>,<# }
		}
		#>) {
<#		foreach(Parameter outParameter in function.Parameters.Where(p => p.Direction == ParameterDirection.Out)) {#>
			<#=outParameter.Name#> = default(<#=code.Format(outParameter.Type)#>);
<#		}#>
			IExecuteResult result = ExecuteMethodCall(this, (MethodInfo) MethodInfo.GetCurrentMethod()<#=String.Join("", function.Parameters.Select(p => ", " + p.Name).ToArray())#>);
<#		int paramIdx = 0;
		foreach(Parameter parameter in function.Parameters) {
			if (parameter.Direction != ParameterDirection.In) {#>
			<#=parameter.Name#> = (<#=code.Format(parameter.Type)#>) result.GetParameterValue(<#=paramIdx#>);
<#			}
			paramIdx++;
		}
#>			return (<#=code.Format(function.ReturnType)#>) result.ReturnValue;
		}
		
<#	}#>

		#endregion
		
<#	if (tableOperations.Count > 0) { #>
		#region Table Operations
		
<#		foreach(var operation in tableOperations) { #>
		private void <#=operation.Type#><#=operation.Table.BaseClass.Name#>(<#=manager.CleanPrefix (operation.Table.BaseClass.QualifiedName, options.RemovePrefixTable)#> obj) {
<#			if (operation.Arguments.Any(a => a.Version == ArgumentVersion.Original)) {
#>			var original = <#=operation.Table.Member#>.GetOriginalEntityState(obj);
<#			}
			int paramIdx = 1;
			foreach(var argument in operation.Arguments.Where(a => a.Parameter.Direction != ParameterDirection.In)) {
#>			<#=code.Format(argument.Parameter.Type)#> p<#=paramIdx++#> = obj.<#=argument.Member#>;
<#			}#>
			<# if (options.StoredProcedureConcurrency) {#>var rowCount = <#}#><#=operation.Function.Method#>(<#
			paramIdx = 1;
			foreach(var argument in operation.Arguments) {
				switch(argument.Parameter.Direction) {
					case ParameterDirection.InOut: #>ref p<#=paramIdx++#><# break;
					case ParameterDirection.Out: #>out p<#=paramIdx++#><# break;
					default: #><#=(argument.Version == ArgumentVersion.New) ? "obj" : "original"#>.<#=argument.Member#><# break;
				}
			if (argument != operation.Arguments.Last()) {#>, <#}
			}
			#>);
<#			if (options.StoredProcedureConcurrency) {#>
			if (rowCount != 1) {
				throw new ChangeConflictException();
			}
<#			}
			paramIdx = 1;
			foreach(var argument in operation.Arguments.Where(a => a.Parameter.Direction != ParameterDirection.In)) {
#>			obj.<#=argument.Member#> = p<#=paramIdx++#>.GetValueOrDefault();
<#			}#>
		}
		
<#
		}
#>
		#endregion
<#	}
}#>
	}
	
	#region Result Classes
		
<#if (data.FunctionClasses.Count > 0) {
	foreach(FunctionClass class1 in data.FunctionClasses) {#> 
<#		if (data.Serialization) {
#>	[DataContract(<#=dataContractAttributes#>)]
<#		} #>
	<#=code.Format(class1.TypeAttributes)#>partial class <#=manager.CleanPrefix (class1.Name, options.RemovePrefixTable)#>
	{
<#		int dataMemberIndex = 1;
		foreach(Column column in class1.Columns) {#>
		private <#=code.Format(column.Type)#> <#=column.Storage#>;
		[Column(Storage=@"<#=column.Storage#>"<#
				if (column.Name != manager.CleanPrefix (column.Member, options.RemovePrefixColumn)) {#>, Name=@"<#=column.Name#>"<#}
				if (!String.IsNullOrEmpty(column.DbType)) {#>, DbType=@"<#=column.DbType#>"<#}
				if (!column.CanBeNull && !column.IsPrimaryKey) {#>, CanBeNull=false<#}
		#>)]
<#			if (data.Serialization && ((column.MemberAttributes & MemberAttributes.AccessMask) == MemberAttributes.Public)) {
#>		[DataMember(Order=<#=dataMemberIndex++#>)]
<#			}
#>		<#=code.Format(column.MemberAttributes)#><#=code.Format(column.Type)#> <#=manager.CleanPrefix (column.Member, options.RemovePrefixColumn)#> {
			get { return <#=column.Storage#>; }
			set {
				if (<#=column.Storage#> != value) {
					<#=column.Storage#> = value;
				}
			}
		}
<#		} #>
	}
<#	
	}
}#>

	#endregion
	
<#if (!String.IsNullOrEmpty(data.ContextNamespace)) {
#>}
<#}
	manager.StartFooter();
#>
#pragma warning restore 1591
<#
	manager.EndFooter(); 
	manager.Process(options.FilePerEntity);
#> 
