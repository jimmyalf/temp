<#@ template language="C#v3.5" hostspecific="True" #>
<#@ include file="Definitions.ttinclude"#>
<#
	manager.StartHeader();
#>
#pragma warning disable 1591

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Spinit's LINQ to SQL template for T4 C#
//     Generated at <#=DateTime.Now#>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq.Expressions;

using Spinit.Data.Linq;

using <#=manager.OutputProjectCore#>.<#=manager.OutputDirectoryCoreEntities#>;

<# manager.EndHeader();
foreach(Table table in data.Tables) {
	foreach(TableClass class1 in table.Classes) {
		if (manager.IsInList (manager.CleanPrefix (class1.Name, options.RemovePrefixTable), options.ExcludeTablesData)) {
			continue;
		}

		manager.StartBlock("E" + Path.ChangeExtension(manager.CleanPrefix (class1.Name, options.RemovePrefixTable),".cs"));
		if (!String.IsNullOrEmpty(data.EntityNamespace)) {#>
namespace <#=manager.OutputProjectData#>.<#=manager.OutputDirectoryDataEntities#>
{	
<#		}
		if (data.Serialization && class1.IsSerializable) {
#>	[DataContract(<#=dataContractAttributes#>)]
<#		}
		if (class1 == table.BaseClass) {#>
	[Table(Name=@"<#=table.Name#>")]
<#			foreach(TableClass subclass in data.TableClasses.Where(c => c.Table == table)) {
				if (!String.IsNullOrEmpty(subclass.InheritanceCode)) {#>
	[InheritanceMapping(Code=@"<#=subclass.InheritanceCode#>", Type=typeof(<#=subclass.Name#>)<# if (subclass.IsInheritanceDefault) {#>, IsDefault=true<#}#>)]
<#				}
				if (data.Serialization && subclass.IsSerializable) {#>[KnownType(typeof(<#=subclass.Name#>))]<#}
			}
#>	<#=code.Format(class1.TypeAttributes)#>partial class E<#=manager.CleanPrefix (class1.Name, options.RemovePrefixTable)#> :<#if (!String.IsNullOrEmpty(data.EntityBase)) {#> <#=data.EntityBase#>, <#}#> <#= options.EnityBaseClass #>
	{
		#region Spinit search extension
		
		/// <summary>
		/// Creates a lambda-expression for use with the data-load-option feature,
		/// </summary>
		/// <param name="property">The property to search-for.</param>
		/// <returns>A lambda-expression.</returns>

		public override LambdaExpression BuildSearchExpression (string property)
		{
			ParameterExpression parameter = Expression.Parameter (GetType (), "e<#=manager.CleanPrefix (class1.Name, options.RemovePrefixTable)#>");
			return Expression.Lambda<Func<E<#=manager.CleanPrefix (class1.Name, options.RemovePrefixTable)#>, object>> (
						Expression.Property (parameter, property),
						parameter);
		}
		
		#endregion
		
<#		} else {
#>	<#=code.Format(class1.TypeAttributes)#>partial class <#=manager.CleanPrefix (class1.Name, options.RemovePrefixTable)#> : <#=class1.SuperClass.Name#>
	{
<#		}#>
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
<#		if (class1.HasPrimaryKey) {#>
		partial void OnCreated();
<#		}#>
		#endregion

		#region Construction
		public E<#=manager.CleanPrefix (class1.Name, options.RemovePrefixTable)#>()
		{
<#		if (data.Serialization) {
#>			Initialize();
		}
		
		private void Initialize()
		{
<#		}
		foreach(Association association in class1.Associations) {
#>			<#=association.Storage#> = <#
			if (association.IsMany) {
				#>new EntitySet<E<#=manager.CleanPrefix (association.Type.Name, options.RemovePrefixTable)#>>(attach_<#=manager.CleanPrefix (association.Member, options.RemovePrefixTable)#>, detach_<#=manager.CleanPrefix (association.Member, options.RemovePrefixTable)#>);
<#			} else {
				#>default(EntityRef<E<#=manager.CleanPrefix (association.Type.Name, options.RemovePrefixTable)#>>); 
<#			}
		}
		if (class1.HasPrimaryKey) {#>
			OnCreated();
<#		}#>
		}
		#endregion

<#		int dataMemberIndex = 1;
		if (class1.Columns.Count > 0) {
#>		#region Column Mappings
<#			foreach(Column column in class1.Columns) {#>
		partial void On<#=manager.CleanPrefix (column.Member, options.RemovePrefixColumn)#>Changing(<#=code.Format(column.Type)#> value);
		partial void On<#=manager.CleanPrefix (column.Member, options.RemovePrefixColumn)#>Changed();
		private <#=code.Format(column.StorageType)#> <#=column.Storage#><# if (column.IsReadOnly) {#> = default(<#=code.Format(column.StorageType)#>)<#}#>;
		[Column(Storage=@"<#=column.Storage#>"<#
				if (column.Name != manager.CleanPrefix (column.Member, options.RemovePrefixColumn)) {#>, Name=@"<#=column.Name#>"<#}
				if (column.AutoSync != AutoSync.Default) {#>, AutoSync=AutoSync.<#=column.AutoSync.ToString()#><#}
				if (!String.IsNullOrEmpty(column.DbType)) {#>, DbType=@"<#=column.DbType#>"<#}
				if (column.IsPrimaryKey) {#>, IsPrimaryKey=true<#}
				if (column.IsDiscriminator) {#>, IsDiscriminator=true<#}
				if (column.IsDbGenerated) {#>, IsDbGenerated=true<#}
				if (column.IsVersion) {#>, IsVersion=true<#}
				if (!column.CanBeNull && !column.IsPrimaryKey && !column.Member.Equals ("RowId")) {#>, CanBeNull=false<#}
				if (!column.CanBeNull && !column.IsPrimaryKey && column.Member.Equals ("RowId")) {#>, IsDbGenerated=true<#}
				if (column.UpdateCheck != UpdateCheck.Always) {#>, UpdateCheck=UpdateCheck.<#=column.UpdateCheck.ToString()#><#}
				if (!String.IsNullOrEmpty(column.Expression)) {#>, Expression=@"<#=column.Expression#>"<#}
		#>)]
<#				if (data.Serialization && ((column.MemberAttributes & MemberAttributes.AccessMask) == MemberAttributes.Public)) {
#>		[DataMember(Order=<#=dataMemberIndex++#>)]
<#				}
#>		<#=code.Format(column.MemberAttributes)#><#=code.Format(column.Type)#> <#=manager.CleanPrefix (column.Member, options.RemovePrefixColumn)#>
		{
			get { return <#=column.StorageValue#>; }
<#				if (!column.IsReadOnly) { #>
			set {
				if (<#=column.StorageValue#> != value) {
<#					if (column.ForeignKeyAssociations.Count > 0) {#>
					if (<#=String.Join(" || ", column.ForeignKeyAssociations.Select(a => a.Storage + ".HasLoadedOrAssignedValue").ToArray())#>) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
<#					}#>
					On<#=manager.CleanPrefix (column.Member, options.RemovePrefixColumn)#>Changing(value);
					SendPropertyChanging();
					<#=column.StorageValue#> = value;
					SendPropertyChanged("<#=manager.CleanPrefix (column.Member, options.RemovePrefixColumn)#>");
					On<#=manager.CleanPrefix (column.Member, options.RemovePrefixColumn)#>Changed();
				}
			}
<#				}#>
		}
		
<#			}#>
		#endregion
<#		}
		bool needsSerializationFlag = class1.IsSerializable && class1.Associations.Any(a => !a.ManagesKeys);
		if (class1.Associations.Count > 0) {
#>		
		#region Associations
<#			foreach(Association association in class1.Associations) {#>
		private Entity<#=(association.IsMany) ? "Set" : "Ref"#><E<#=manager.CleanPrefix (association.Type.Name, options.RemovePrefixTable)#>> <#=association.Storage#>;
		[Association(Name=@"<#=association.Name#>"<#
			#>, Storage=@"<#=association.Storage#>"<#
				if (association.ThisKeyMembers != null) {#>, ThisKey=@"<#=String.Join(",", association.ThisKeyMembers)#>"<#}
				if (association.OtherKeyMembers != null) {#>, OtherKey=@"<#=String.Join(",", association.OtherKeyMembers)#>"<#}
				if (association.IsForeignKey) {#>, IsForeignKey=true<#}
				if (association.IsUnique) {#>, IsUnique=true, IsForeignKey=false<#}
				if (association.DeleteOnNull) {#>, DeleteOnNull=true<#}
				if (association.DeleteRule != null) {#>, DeleteRule=@"<#=association.DeleteRule #>"<#}
		#>)]
<#				bool serialization = association.IsSerializable && data.Serialization &&
					(options.SerializeDataContractSP1 || !association.ManagesKeys);
				if (serialization) {
#>		[DataMember(Order=<#=dataMemberIndex++#>, EmitDefaultValue=false)]
<#				}
				if (!association.IsMany) {#>
		<#=code.Format(association.MemberAttributes)#>E<#=manager.CleanPrefix (association.Type.Name, options.RemovePrefixTable)#> <#=manager.CleanPrefix (association.Member, options.RemovePrefixTable)#>
		{
			get {
<#					if (needsSerializationFlag && serialization) {#>
				if (serializing && !<#=association.Storage#>.HasLoadedOrAssignedValue) {
					return null;
				}
<#					}#>
				return <#=association.Storage#>.Entity;
			}
			set {
				E<#=manager.CleanPrefix (association.Type.Name, options.RemovePrefixTable)#> previousValue = <#=association.Storage#>.Entity;
				if ((previousValue != value)<#if (association.OtherSide != null) {#> || (!<#=association.Storage#>.HasLoadedOrAssignedValue)<#}#>) {
					SendPropertyChanging();
<#					if (association.OtherSide != null) {#>
					if (previousValue != null) {
						<#=association.Storage#>.Entity = null;
						previousValue.<#=manager.CleanPrefix (association.OtherSide.Member, options.RemovePrefixTable)#><#if (!association.OtherSide.IsMany) {#> = null<#} else {#>.Remove(this)<#}#>;
					}
<#					}
#>					<#=association.Storage#>.Entity = value;
<#					if (association.OtherSide != null) {#>
					if (value != null) {
						value.<#=manager.CleanPrefix (association.OtherSide.Member, options.RemovePrefixTable)#><#if (!association.OtherSide.IsMany) {#> = this<#} else {#>.Add(this)<#}#>;
<#						if (association.ManagesKeys) {
							for(int keyIdx=0;keyIdx<association.ThisKey.Count();keyIdx++) {#>
						<#=association.ThisKey[keyIdx].Storage#> = value.<#=association.OtherKey[keyIdx].Member#>;
<#							}#>
					}
					else {
<#							for(int keyIdx=0;keyIdx<association.ThisKey.Count();keyIdx++) {
#>						<#=association.ThisKey[keyIdx].Storage#> = default(<#=code.Format(association.ThisKey[keyIdx].Type)#>);
<#							}
						}
#>					}
<#					}#>
					SendPropertyChanged("<#=manager.CleanPrefix (association.Member, options.RemovePrefixTable)#>");
				}
			}
		}

<#				} else {#>
		<#=code.Format(association.MemberAttributes)#>EntitySet<E<#=manager.CleanPrefix (association.Type.Name, options.RemovePrefixTable)#>> <#=manager.CleanPrefix (association.Member, options.RemovePrefixTable)#>
		{
			get {
<#					if (needsSerializationFlag && serialization) {#>
				if (serializing && !<#=association.Storage#>.HasLoadedOrAssignedValues) {
					return null;
				}
<#					} #>
				return <#=association.Storage#>;
			}
			set {
				<#=association.Storage#>.Assign(value);
			}
		}

		private void attach_<#=manager.CleanPrefix (association.Member, options.RemovePrefixTable)#>(E<#=manager.CleanPrefix (association.Type.Name, options.RemovePrefixTable)#> entity)
		{
			SendPropertyChanging();
			entity.<#=manager.CleanPrefix (association.OtherSide.Member, options.RemovePrefixTable)#> = this;
		}
		
		private void detach_<#=manager.CleanPrefix (association.Member, options.RemovePrefixTable)#>(E<#=manager.CleanPrefix (association.Type.Name, options.RemovePrefixTable)#> entity)
		{
			SendPropertyChanging();
			entity.<#=manager.CleanPrefix (association.OtherSide.Member, options.RemovePrefixTable)#> = null;
		}
<#				}
			}#>
		#endregion
<#		}
		if (data.Serialization) {#>
		
		#region Serialization
<#			if (needsSerializationFlag) {#>
		private bool serializing;
		
		[OnSerializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			serializing = true;
		}
		
		[OnSerialized()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			serializing = false;
		}
		
<#			}#>
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public <#if (class1 != table.BaseClass) {#>new<#}#> void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
<#		}	#>

		#region Converters
		
		/// <summary>
		/// Converts from E<#=manager.CleanPrefix (class1.Name, options.RemovePrefixTable)#> to <#=manager.CleanPrefix (class1.Name, options.RemovePrefixTable)#>.
		/// </summary>
		/// <param name="e<#=manager.CleanPrefix (class1.Name, options.RemovePrefixTable)#>">The E<#=manager.CleanPrefix (class1.Name, options.RemovePrefixTable)#>.</param>
		/// <returns>The converted <#=manager.CleanPrefix (class1.Name, options.RemovePrefixTable)#>.</returns>

		public static <#=manager.CleanPrefix (class1.Name, options.RemovePrefixTable)#> Convert (E<#=manager.CleanPrefix (class1.Name, options.RemovePrefixTable)#> e<#=manager.CleanPrefix (class1.Name, options.RemovePrefixTable)#>)
		{
			<#=manager.CleanPrefix (class1.Name, options.RemovePrefixTable)#> <#= string.Concat (manager.CleanPrefix (class1.Name, options.RemovePrefixTable).Substring (0, 1).ToLower (), manager.CleanPrefix (class1.Name, options.RemovePrefixTable).Substring (1, manager.CleanPrefix (class1.Name, options.RemovePrefixTable).Length - 1))#> = new <#=manager.CleanPrefix (class1.Name, options.RemovePrefixTable)#>
			{
<#		foreach(Column column in class1.Columns) {#>
				<#=manager.CleanPrefix (column.Member, options.RemovePrefixColumn)#> = e<#=manager.CleanPrefix (class1.Name, options.RemovePrefixTable)#>.<#=manager.CleanPrefix (column.Member, options.RemovePrefixColumn)#><#=string.Equals (code.Format(column.Type), "Binary") ? ".ToArray ()" : ""#>,
<#		} #>
			};
			
			return <#= string.Concat (manager.CleanPrefix (class1.Name, options.RemovePrefixTable).Substring (0, 1).ToLower (), manager.CleanPrefix (class1.Name, options.RemovePrefixTable).Substring (1, manager.CleanPrefix (class1.Name, options.RemovePrefixTable).Length - 1))#>;
		}
		
		/// <summary>
		/// Converts from <#=manager.CleanPrefix (class1.Name, options.RemovePrefixTable)#> to E<#=manager.CleanPrefix (class1.Name, options.RemovePrefixTable)#>.
		/// </summary>
		/// <param name="<#= string.Concat (manager.CleanPrefix (class1.Name, options.RemovePrefixTable).Substring (0, 1).ToLower (), manager.CleanPrefix (class1.Name, options.RemovePrefixTable).Substring (1, manager.CleanPrefix (class1.Name, options.RemovePrefixTable).Length - 1))#>">The <#=manager.CleanPrefix (class1.Name, options.RemovePrefixTable)#>.</param>
		/// <returns>The converted E<#=manager.CleanPrefix (class1.Name, options.RemovePrefixTable)#>.</returns>

		public static E<#=manager.CleanPrefix (class1.Name, options.RemovePrefixTable)#> Convert (<#=manager.CleanPrefix (class1.Name, options.RemovePrefixTable)#> <#= string.Concat (manager.CleanPrefix (class1.Name, options.RemovePrefixTable).Substring (0, 1).ToLower (), manager.CleanPrefix (class1.Name, options.RemovePrefixTable).Substring (1, manager.CleanPrefix (class1.Name, options.RemovePrefixTable).Length - 1))#>)
		{		
			return new E<#=manager.CleanPrefix (class1.Name, options.RemovePrefixTable)#>
			{
<#		foreach(Column column in class1.Columns) {#>
				<#=manager.CleanPrefix (column.Member, options.RemovePrefixColumn)#> = <#=string.Equals (code.Format(column.Type), "Binary") ? "new Binary (" : ""#><#= string.Concat (manager.CleanPrefix (class1.Name, options.RemovePrefixTable).Substring (0, 1).ToLower (), manager.CleanPrefix (class1.Name, options.RemovePrefixTable).Substring (1, manager.CleanPrefix (class1.Name, options.RemovePrefixTable).Length - 1))#>.<#=manager.CleanPrefix (column.Member, options.RemovePrefixColumn)#><#=string.Equals (code.Format(column.Type), "Binary") ? ")" : ""#>,
<#		} #>
			};
		}

		#endregion
	}
<#		if (!String.IsNullOrEmpty(data.EntityNamespace)) {#>
}
<#		}
		manager.EndBlock(false);
	}
}
#>
<#
	manager.StartFooter();
#>
#pragma warning restore 1591
<#
	manager.EndFooter(); 
	manager.Process(options.FilePerEntity);
#> 
