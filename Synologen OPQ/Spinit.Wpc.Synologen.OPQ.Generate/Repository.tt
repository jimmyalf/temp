<#@ template language="C#v3.5" hostspecific="True" #>
<#@ include file="Definitions.tt"#>
<#
	manager.StartHeader();
#>
#pragma warning disable 1591

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Spinit's LINQ to SQL template for T4 C#
//     Generated at <#=DateTime.Now#>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;

using Spinit.Data.Linq;
using Spinit.Logging;

using <#=manager.OutputProjectCore#>;
using <#=manager.OutputProjectCore#>.<#=manager.OutputDirectoryCoreEntities#>;
using <#=manager.OutputProjectData#>.<#=manager.OutputDirectoryDataEntities#>;

<# manager.EndHeader();
if(!String.IsNullOrEmpty(data.ContextNamespace)){
#>
namespace <#=manager.OutputProjectData#>
{
<#}#>
	public<#= !options.CreateRepositoryWithManagers ? " partial " : " " #>class <#=repositoryClassName#> : <#=options.RepositoryBaseClass#>
	{
		#region Constructors

		/// <summary>
		/// Constructor whics sets configuration and logging.
		/// </summary>
		/// <param name="configuration">The configuration.</param>
		/// <param name="loggingService">The logging-service.</param>

		public <#=repositoryClassName#> (
			Configuration configuration,
			ILoggingService loggingService) 
			: base (new <#=dataContextClassName#> (configuration.ConnectionString))
		{
			OnCreate ();

			Configuration = configuration;
			
			LoggingService = loggingService;

			TrackingOn = false;
		}

		/// <summary>
		/// Constructor whics sets configuration, logging and tracking.
		/// </summary>
		/// <param name="configuration">The configuration.</param>
		/// <param name="loggingService">The logging-service.</param>
		/// <param name="noTracking">If true=>no tracking.</param>

		public <#=repositoryClassName#> (
			Configuration configuration,
			ILoggingService loggingService,
			bool noTracking)
			: base (new <#=dataContextClassName#> (configuration.ConnectionString).NoTracking ())
		{
			OnCreate ();

			Configuration = configuration;

			LoggingService = loggingService;

			TrackingOn = noTracking;
		}

		/// <summary>
		/// Constructor whics sets configuration, logging and context.
		/// </summary>
		/// <param name="configuration">The configuration.</param>
		/// <param name="loggingService">The logging-service.</param>
		/// <param name="context">The context.</param>

		public <#=repositoryClassName#> (
			Configuration configuration,
			ILoggingService loggingService,
			SpinitDataContext context)
			: base (context)
		{
			OnCreate ();

			Configuration = configuration;

			LoggingService = loggingService;

			TrackingOn = false;
		}

		#endregion
		
<# if (options.CreateRepositoryWithManagers) { #> 
		#region On Create

		/// <summary>
		/// The on-create overriden class
		/// </summary>

		protected override sealed void OnCreate ()
		{
			/* 
				Put Manager initiation here, e.g.:
				Account = new AccountManager (this);
			*/
		}
		
		#endregion
		
		#region Managers

		/*
			Put manager getters here, e.g.:
			/// <summary>
			/// Gets the account-manager.
			/// </summary>

			public AccountManager Account { get; private set; }
		*/

		#endregion
<#}#> 		
		#region Create Repository

		/// <summary>
		/// Creates the repository with tracking.
		/// </summary>
		/// <param name="configuration">The configuarion.</param>
		/// <param name="loggingService">The logging service.</param>
		/// <returns>A repository</returns>

		public static <#=repositoryClassName#> Get<#=repositoryClassName#> (
			Configuration configuration,
			ILoggingService loggingService)
		{
			return new <#=repositoryClassName#> (
				configuration,
				loggingService);
		}

		/// <summary>
		/// Creates the repository without tracking.
		/// </summary>
		/// <param name="configuration">The configuarion.</param>
		/// <param name="loggingService">The logging service.</param>
		/// <returns>A repository</returns>

		public static <#=repositoryClassName#> Get<#=repositoryClassName#>NoTracking (
			Configuration configuration,
			ILoggingService loggingService)
		{
			return new <#=repositoryClassName#> (
				configuration,
				loggingService,
				true);
		}

		#endregion
		
		#region Search

		/// <summary>
		/// Creates a search-table.
		/// </summary>

		protected override void CreateSearchTable ()
		{
			_searchTable = new List<SearchPairs>
			{
<#if(data.Tables.Count > 0) {#>
<#	foreach(Table table in data.Tables) {#>
				new SearchPairs (typeof (<#=table.BaseClass.QualifiedName#>), new E<#=table.BaseClass.QualifiedName#> ()),
<#	}#>
<#}#>
			};
		}

		#endregion
		
		#region Global properties

		/// <summary>
		/// Gets or sets the configuration
		/// </summary>

		public Configuration Configuration { get; set; }

		#endregion
	}
		
<#if (!String.IsNullOrEmpty(data.ContextNamespace)) {
#>}
<#}
	manager.StartFooter();
#>
#pragma warning restore 1591
<#
	manager.EndFooter(); 
	manager.Process(options.FilePerEntity);
#> 
