<#@ template language="C#v3.5" hostspecific="True" debug="true" inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation"#>
<#@ import namespace="System.IO" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ include file="Definitions.tt"#>
<#  
	// Data context class
	ProcessTemplate ("DataContext.tt", dataContextClassName + ".cs", manager.GetProjectPath (manager.OutputProjectData)); 
	manager.AddToProject (
		manager.OutputProjectData, 
		Path.Combine (manager.GetProjectPath (manager.OutputProjectData), dataContextClassName + ".cs")); 
	// Configuration class
	ProcessTemplate ("Configuration.tt", "Configuration.cs", manager.GetProjectPath (manager.OutputProjectCore)); 
	manager.AddToProject (manager.OutputProjectCore, Path.Combine (manager.GetProjectPath (manager.OutputProjectCore), "Configuration.cs")); 
	// Repository class
	ProcessTemplate ("Repository.tt", repositoryClassName + ".cs", manager.GetProjectPath (manager.OutputProjectData));
	manager.AddToProject (manager.OutputProjectData, Path.Combine (manager.GetProjectPath (manager.OutputProjectData), repositoryClassName + ".cs"));
	// Repository manager class
	if (options.CreateRepositoryManagerFile) {
		ProcessTemplate ("RepositoryManager.tt", repositoryClassName + ".Managers.cs", manager.GetProjectPath (manager.OutputProjectData));
		manager.AddToProject (manager.OutputProjectData, repositoryClassName + ".cs", Path.Combine (manager.GetProjectPath (manager.OutputProjectData), repositoryClassName + ".Managers.cs"));
	}
	// Entity-classes
	ProcessTemplate ("EntityClasses.tt"); 
	//Core-entity-classes
	ProcessTemplate ("CoreEntityClasses.tt");
#>
 
<#+
  void ProcessTemplate (string templateFileName)
  {
    string template = File.ReadAllText (Host.ResolvePath (templateFileName));
    Engine engine = new Engine ();
    engine.ProcessTemplate (template, Host);  
  }  
#>

<#+
void ProcessTemplate (string templateFileName, string outputFileName, string projectPath)
{
	string templateDirectory = Path.GetDirectoryName (Host.TemplateFile);
	string outputFilePath = Path.Combine (projectPath, outputFileName);  

	string template = File.ReadAllText (Host.ResolvePath (templateFileName));
	Engine engine = new Engine ();
	string output = engine.ProcessTemplate (template, Host);  

	File.WriteAllText (outputFilePath, output);  
}
#>
