using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using Spinit.Wpc.Synologen.Business.Domain.Entities;
using Spinit.Wpc.Synologen.Business.Domain.Enumerations;

namespace Spinit.Wpc.Synologen.Business.Domain.Interfaces{
	public interface ISqlProvider {
		DataSet GetShopEquipment(int equipmentId, int shopId, string orderBy);
		ShopEquipment GetShopEquipmentRow(int equipmentId);
		List<int> GetAllEquipmentIdsPerShop(int shopId);
		IEnumerable<ShopEquipment> GetAllEquipmentRowsPerShop(int shopId);
		bool EquipmentHasConnectedShops(int equipmentId);
		bool AddUpdateDeleteShopEquipment(Wpc.Utility.Business.Enumerations.Action action, ref ShopEquipment equipment);
		void DisconnectShopFromAllEquipment(int shopId);
		void ConnectShopToEquipment(int shopId, int equipmentId);
		bool AddUpdateDeleteShopCategory(Wpc.Utility.Business.Enumerations.Action action, ref ShopCategory category);
		DataSet GetShopCategories(int categoryId);
		ShopCategory GetShopCategoryRow(int categoryId);
		bool ShopCategoryHasConnectedShops(int categoryId);
		List<int> GetShopCategoriesPerMemberCategoryId(int memberCategoryId);
		List<int> GetMemberCategoriesPerShopCategoryId(int shopCategoryId);
		bool DisconnectMemberCategoryFromShopCategories(int memberCategoryId);
		bool ConnectMemberCategoryToShopCategory(int memberCategoryId, int shopCategoryId);
		bool AddUpdateDeleteShop(Wpc.Utility.Business.Enumerations.Action action, ref Shop shop);
		DataSet GetShopsByPage(int categoryId, int contractCustomerId, int equipmentId, string searchString, string orderBy, int currentPage, int pageSize, ref int totalSize);
		Shop GetShop(int shopId);
		Shop ParseShopRow(DataRow shopDataRow);
		DataSet GetShops(int? shopId, int? shopCategoryId, int? contractCustomer, int? memberId, int? equipmentId, bool? includeInactive, int? concernId, string orderBy);
		IEnumerable<IShop> GetShopRows(int? shopId, int? shopCategoryId, int? contractCustomer, int? memberId, int? equipmentId, bool? includeInactive, int? concernId, string orderBy);
		List<int> GetAllShopIdsPerCategory(int categoryId);
		List<int> GetAllShopIdsPerMember(int memberId);
		bool ShopHasConnectedOrders(int shopId);
		bool ShopHasConnectedMembers(int shopId);
		bool ShopHasConnectedContracts(int shopId);
		bool DisconnectShopFromAllContracts(int shopId);
		bool ConnectShopToContract(int shopId, int contractCustomerId);
		bool DisconnectAllShopsFromMember(int memberId);
		bool ConnectShopToMember(int shopId, int memberId);
		DataSet GetGiros(int giroId, string orderBy);
		int AddSettlement(int filterStatusId, int statusIdAfterSettlement);
		DataSet GetSettlementsDataSet(int settlementId, int shopId, string orderBy);
		DataSet GetSettlementDetailsDataSet(int settlementId, out float settlementValueIncludingVAT, out float settlementValueExcludingVAT, string orderBy);
		DataSet GetSettlementsOrderItemsDataSetSimple(int shopId, int settlementId, string orderBy, out bool allOrdersMarkedAsPayed, out float orderValueIncludingVAT, out float orderValueExcludingVAT);
		DataSet GetSettlementsOrderItemsDataSetDetailed(int shopId, int settlementId, string orderBy, out bool allOrdersMarkedAsPayed, out float orderValueIncludingVAT, out float orderValueExcludingVAT);
		int MarkOrdersInSettlementAsPayedPerShop(int settlementId, int shopId);
		Settlement GetSettlement(int settlementId);
		DataSet GetOrderStatuses(int orderStatusId);
		OrderStatus GetOrderStatusRow(int orderStatudId);
		bool AddUpdateDeleteOrderStatus(Wpc.Utility.Business.Enumerations.Action action, ref OrderStatus orderStatus);
		bool OrderStatusHasConnectedOrders(int orderStatusId);
		bool AddUpdateDeleteOrderItem(Wpc.Utility.Business.Enumerations.Action action, ref IOrderItem orderItem);
		DataSet GetOrderItemsDataSet(int? orderId, int? articleId, string orderBy);
		IList<OrderItem> GetOrderItemsList(int? orderId, int? articleId, string orderBy);
		DataSet GetOrdersByPage(int contractId, int statusId, int settlementId, DateTime intervalStart, DateTime intervalEnd, string searchString, string orderBy, int currentPage, int pageSize, ref int totalSize);
		DataSet GetOrders(int orderId, int shopId, int contractId, int salesPersonMemberId, int companyId, long invoiceNumberId, int statusId, string orderBy);
		Order GetOrder(int orderId);
		IList<Order> GetOrders(IList<int> orderIds);
		int GetNumberOfOrderWithSpecificStatus(int orderStatus);
		List<Order> GetOrdersForInvoicing(int statusId, int? invoicingMethodIdFilter, string orderBy);
		List<long> GetOrderInvoiceNumbers(int statusId, string orderBy);
		void ChangeOrderStatus(int orderId, int newStatusId);
		bool AddUpdateDeleteOrder(Wpc.Utility.Business.Enumerations.Action action, ref Order order);
		void UpdateOrderStatus(int newOrderStatusId, int filterOrderId, int filterShopId, int filterContractId, int filterSalesPersonMemberId, int filterCompanyId, long filterInvoiceNumberId);
		bool SetOrderInvoiceNumber(int orderId, long invoiceNumber, int newOrderStatusId, double invoiceSumIncludingVAT, double invoiceSumExcludingVAT);
		int AddLog(LogType action, string message);
		DataSet SynologenGetFileCategories(FileCategoryGetAction type, int categoryId);
		Country GetCountryRow(int countryId);
		IList<Country> GetCountryRows(Func<Country, string> orderBy);
		bool AddUpdateDeleteContractArticleConnection(Wpc.Utility.Business.Enumerations.Action action, ref ContractArticleConnection connection);
		ContractArticleConnection GetContractCustomerArticleRow(int connectionId);
		DataSet GetContractArticleConnections(int? connectionId, int? contractId, bool? active, string orderBy);
		DataSet GetContractsByPage(string searchString, string orderBy, int currentPage, int pageSize, ref int totalSize);
		Contract GetContract(int contractCustomerId);
		DataSet GetContracts(FetchCustomerContract type, int contractCustomer, int shopId, bool? active);
		List<int> GetContractIdsPerShop(int shopId, bool? active);
		bool ContractHasConnectedOrders(int contractId);
		bool AddUpdateDeleteContract(Wpc.Utility.Business.Enumerations.Action action, ref Contract contract);
		Concern GetConcern(int concernId);
		bool AddUpdateDeleteCompany(Wpc.Utility.Business.Enumerations.Action action, ref Company company);
		Company GetCompanyRow(int companyId);
		DataSet GetCompanies(int companyId, int contractId, string orderBy, ActiveFilter activeFilter);
		DataSet GetCompanyValidationRulesDataSet(int? validationRuleId, int? companyId);
		bool CompanyHasConnectedOrders(int companyId);
		int ConnectCompanyToValidationRule(int companyId, int validationRuleId);
		int DisconnectCompanyFromValidationRule(int companyId, int validationRuleId);
		Article GetArticle(int articleId);
		DataSet GetArticles(int articleId, int contractId, string orderBy);
		DataSet GetAllArticles(string orderBy);
		DataSet GetContractArticles(int contractCustomerId, string orderBy);
		bool AddUpdateDeleteArticle(Wpc.Utility.Business.Enumerations.Action action, ref Article article);
		bool ArticleHasConnectedContracts(int articleId);
		bool ArticleHasConnectedOrders(int articleId);
		int AddOrderHistory(int orderId, string message);
		int AddOrderHistory(long invoiceNumber, string message);
		DataSet GetOrderHistory(int orderId);
		DataSet GetSynologenMembersByPage(int type, int locationId, int languageId, int categoryId, int shopId, string searchString, string orderBy, int currentPage, int pageSize, ref int totalSize);
		DataSet GetSynologenMembers(int memberId, int shopId, int categoryId, string orderBy);
		bool CategoryHasConnectedMembers(int categoryId);
		bool MemberHasConnectedOrders(int memberId);
		void UpdateMemberUserDetails(int memberId, string newPassword, string email, bool active, string updatingUser);
		DataSet GetInvoicingMethods(int? invoicingMethodId, string orderBy);
		DataSet getMembersForLocation(int type, int locationId, int languageId);
		DataSet getPublicMembersForLocation(int type, int locationId, int languageId);
		DataSet GetLatestPublicMembersForLocation(int locationId, int languageId, int max);
		DataSet getPublicMembersForLocationAndCategory(int type, int locationId, int languageId, int categoryId);
		DataSet GetByPage(int type, int locationId, int languageId, int categoryId, string searchString, string orderBy, int currentPage, int pageSize, ref int totalSize);
		DataSet getLocations();
		int GetMemberId(int userId);
		int GetUserId(int memberId);
		DataSet GetConnectedLocations(int memberId);
		List<int> GetConnectedLocationList(int memberId);
		DataSet GetConnectedCategories(int memberId, int locationId, int languageId);
		List<int> GetConnectedCategoriesList(int memberId, int locationId, int languageId);
		bool DisconnectFromLocation(int memberId, int locationId);
		bool ConnectToLocation(int memberId, int locationId);
		bool DisconnectFromCategory(int memberId, int categoryId);
		bool ConnectToCategory(int memberId, int categoryId);
		bool AddBaseUserConnection(int memberId, int userId);
		bool CreateObjectFile(int memberId, int fileId);
		bool RemoveObjectFile(int memberId, int fileId);
		ArrayList GetObjectFile(int memberId, int fileId);
		DataSet GetMemberFiles(int fileId, int memberId, int top);
		bool CreateObjectLink(int objId, int lnkId);
		ArrayList GetObjectLink(int objId, int lnkId);
		bool RemoveObjectLink(int objId, int lnkId);
		DataSet GetCategories(int languageId, int locationId);
		DataSet GetFileCategories();
		bool DisconnectNewsItem(int memberId, int newsId);
		bool ConnectNewsItem(int memberId, int newsId);
		DataSet GetPublicNews(int newsId, int locationId, int languageId, int categoryId, int memberId);
		bool DisconnectContractFromAllShops(int contractId);
		bool ContractHasShops(int contractCustomerId);
		void SetOrderInvoiceDate(int orderId, DateTime invoiceDateTime);
	}
}