<#@ template language="C#" HostSpecific="True" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#
MvcTextTemplateHost mvcHost = (MvcTextTemplateHost)(Host);
string mvcViewDataTypeGenericString = (!String.IsNullOrEmpty(mvcHost.ViewDataTypeName)) ? "<" + mvcHost.ViewDataTypeName + ">" : String.Empty;
int CPHCounter = 1;
bool isFramework4 = (mvcHost.FrameworkVersion >= new System.Version(4, 0));
string nugget, htmlEncodeBegin, htmlEncodeEnd;
if (isFramework4) {
	nugget = ":";
	htmlEncodeBegin = "";
	htmlEncodeEnd = "";
	if (String.IsNullOrEmpty(mvcViewDataTypeGenericString)) {
		mvcViewDataTypeGenericString = "<dynamic>";
	}
} else {
	nugget = "=";
	htmlEncodeBegin = "Html.Encode(";
	htmlEncodeEnd = ")";
}
#>
<#
// The following chained if-statement outputs the user-control needed for a partial view, or opens the asp:Content tag or html tags used in the case of a master page or regular view page
if(mvcHost.IsPartialView) {
#>
<%@ Control Inherits="System.Web.Mvc.ViewUserControl<#= mvcViewDataTypeGenericString #>" %>
<#
} else if(mvcHost.IsContentPage) {
#>
<%@ Page MasterPageFile="<#= mvcHost.MasterPageFile #>" Inherits="System.Web.Mvc.ViewPage<#= mvcViewDataTypeGenericString #>" %>
<#
	foreach(string cphid in mvcHost.ContentPlaceHolderIDs) {
		if(cphid.Equals("TitleContent", StringComparison.OrdinalIgnoreCase)) {
#>
<asp:Content ContentPlaceHolderID="<#= cphid #>" runat="server"><#= mvcHost.ViewName #></asp:Content>
<#
			CPHCounter++;
		}
	}
#>
<asp:Content ContentPlaceHolderID="<#= mvcHost.PrimaryContentPlaceHolderID #>" runat="server">
	<h1>Edit <#= mvcHost.ViewDataType.Name #></h1>
<#
} else {
#>
<%@ Page Inherits="System.Web.Mvc.ViewPage<#= mvcViewDataTypeGenericString #>" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head runat="server">
	<title>Edit <#= mvcHost.ViewDataType.Name #></title>
</head>
<body>
	<h1>Edit <#= mvcHost.ViewDataType.Name #></h1>
<#
}
#>
<#
if(!String.IsNullOrEmpty(mvcViewDataTypeGenericString)) {
	Dictionary<string, string> properties = new Dictionary<string, string>();
	FilterProperties(mvcHost.ViewDataType, properties);
#>
	<% Html.EnableClientValidation(); %>
	<%<#= nugget #> Html.ValidationSummary(true) %>
	<% using (Html.BeginForm()) {%>
		<fieldset>
			<legend><#= mvcHost.ViewDataType.Name #></legend>
<#
	foreach(KeyValuePair<string, string> property in properties) {
#>
			<p class="formItem">
				<%<#= nugget #> Html.LabelFor(x => x.<#= property.Key #>) %>
				<%<#= nugget #> Html.EditorFor(x => x.<#= property.Key #>) %>
				<%<#= nugget #> Html.ValidationMessageFor(x => x.<#= property.Key #>) %>
			</p>
<#
	}
#>
			<p class="formCommands">
				<%<#= nugget #> Html.AntiForgeryToken() %>
				<%= Html.HiddenFor(x => x.Id) %>
				<input type="submit" value="Save" class="btnBig" />
			</p>
		</fieldset>
    <% } %>
	<p>
		<%<#= nugget #> Html.ActionLink("Back to index", "Index") %>
	</p>
<#
}
#>
<#
// The following code closes the asp:Content tag used in the case of a master page and the body and html tags in the case of a regular view page
#>
<#
if(mvcHost.IsContentPage) {
#>
</asp:Content>
<#
	foreach(string cphid in mvcHost.ContentPlaceHolderIDs) {
		if(!cphid.Equals("TitleContent", StringComparison.OrdinalIgnoreCase) && !cphid.Equals(mvcHost.PrimaryContentPlaceHolderID, StringComparison.OrdinalIgnoreCase)) {
			CPHCounter++;
#>

<asp:Content ID="Content<#= CPHCounter #>" ContentPlaceHolderID="<#= cphid #>" runat="server">
</asp:Content>
<#
		}
	}
#>
<#
} else if(!mvcHost.IsPartialView && !mvcHost.IsContentPage) {
#>
</body>
</html>
<#
}
#>
<#+
public void FilterProperties(Type type, Dictionary<string, string> properties) {
	if(type != null) {
		PropertyInfo[] publicProperties = type.GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static);

		foreach (PropertyInfo pi in publicProperties)
		{
			if (pi.GetIndexParameters().Length > 0)
			{
				continue;
			}
			
			Type currentPropertyType = pi.PropertyType;
			Type currentUnderlyingType = System.Nullable.GetUnderlyingType(currentPropertyType);
			
			if(currentUnderlyingType != null) {
				currentPropertyType = currentUnderlyingType;
			}
			
			if (IsBindableType(currentPropertyType) && pi.CanRead && pi.CanWrite)
			{				
				if(currentPropertyType.Equals(typeof(double)) || currentPropertyType.Equals(typeof(decimal))) {
					properties.Add(pi.Name, ", new { value = String.Format(\"{0:F}\", Model." + pi.Name + ") }");
				} else if(currentPropertyType.Equals(typeof(DateTime))) {
					properties.Add(pi.Name, ", new { value = String.Format(\"{0:g}\", Model." + pi.Name + ") }");
				} else {
					properties.Add(pi.Name, String.Empty);
				}
			}
		}
	}
}

public bool IsBindableType(Type type)
{
	bool isBindable = false;

	if (type.IsPrimitive || type.Equals(typeof(string)) || type.Equals(typeof(DateTime)) || type.Equals(typeof(decimal)) || type.Equals(typeof(Guid)) || type.Equals(typeof(DateTimeOffset)) || type.Equals(typeof(TimeSpan)))
	{
		isBindable = true;
	}

	return isBindable;
}
#>